{"version":3,"sources":["webpack:///./dist/ngrx-query/fesm5/ngrx-query.js","webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/demo/app.component.html","webpack:///./src/demo/app.component.scss","webpack:///./src/demo/app.component.ts","webpack:///./src/demo/app.module.ts","webpack:///./src/demo/mockServer.ts","webpack:///./src/demo/networkLogger.service.ts","webpack:///./src/demo/queriesList/queries-list.component.html","webpack:///./src/demo/queriesList/queries-list.component.ts","webpack:///./src/demo/ranger/queries.ts","webpack:///./src/demo/ranger/ranger-detail.component.html","webpack:///./src/demo/ranger/ranger-detail.component.ts","webpack:///./src/demo/ranger/ranger-list.component.html","webpack:///./src/demo/ranger/ranger-list.component.ts","webpack:///./src/demo/ranger/ranger-list.data.directive.ts","webpack:///./src/demo/selectors.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAA6H;AACW;AACxH;AACM;AACe;AAC2C;AAC/C;AACmB;AACX;AACjB;AACJ;AACE;AACiB;AACH;AAC6B;;AAEjE;AACA;AACA,cAAc,WAAW;AACzB;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;;AAEjB;AACA;AACA,cAAc,WAAW;AACzB;AACA,eAAe,EAAE,wCAAwC,wBAAwB,6FAAyB,wBAAwB,EAAE;AACpI,eAAe,EAAE,uCAAuC,wBAAwB,4FAAwB,qBAAqB,EAAE;;AAE/H;AACA;AACA,cAAc,WAAW;AACzB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE,gDAAgD,uBAAuB;AACxF,eAAe,EAAE,+CAA+C,sBAAsB;AACtF,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,KAAK,iEAAmB;AACxB;AACA;AACA,6CAA6C;AAC7C,KAAK,2DAAe;AACpB,KAAK,gCAAgC,yFAA2C,IAAI;AACpF,EAAE;;AAEF;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,YAAY,yIAAmF,kBAAkB,EAAE;AACnH;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uDAAuD,6BAA6B,EAAE;AACtF;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,uCAAuC,gBAAgB,cAAc;AACrE;AACA;AACA,CAAC;AACD;AACA,KAAK;AACL;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA,sDAAsD;AACtD,KAAK,wBAAwB;AAC7B,KAAK,yEAA2B;AAChC,KAAK,2CAA2C,+DAAiB,IAAI;AACrE,EAAE;AACF;AACA,gBAAgB,kFAAoC;AACpD,kBAAkB,6DAAe;AACjC;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,gDAAgD,iBAAiB,EAAE;AACnE;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,KAAK,IAAI;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,oCAAoC,oEAAoE,EAAE;AAC1G;AACA,+BAA+B;AAC/B;AACA,aAAa;AACb,4BAA4B;AAC5B,oFAAoF,yBAAyB,2BAA2B,EAAE;AAC1I;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,oCAAoC,+FAA+F,EAAE;AACrI;AACA,+BAA+B,4CAA4C;AAC3E;AACA,aAAa;AACb,4BAA4B;AAC5B,oFAAoF,yBAAyB,2BAA2B,EAAE;AAC1I;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,4CAA4C,wBAAwB;AACpE;AACA,iBAAiB;AACjB;AACA;AACA,+BAA+B,4CAA4C;AAC3E;AACA,aAAa;AACb,4BAA4B;AAC5B,oFAAoF,yBAAyB,2BAA2B,EAAE;AAC1I;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,4CAA4C,wBAAwB;AACpE;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb,oCAAoC,iFAAiF,EAAE;AACvH;AACA,+BAA+B,4CAA4C;AAC3E;AACA,aAAa;AACb,4BAA4B;AAC5B,oFAAoF,yBAAyB,2BAA2B,EAAE;AAC1I;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,oCAAoC,oDAAoD,EAAE;AAC1F,sCAAsC;AACtC,0EAA0E,sHAAwC,EAAE;AACpH;AACA;AACA;AACA,aAAa;AACb,4BAA4B;AAC5B,0EAA0E,sHAAwC,EAAE;AACpH;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AACD;AACA,KAAK,iEAAmB;AACxB;AACA;AACA,mDAAmD;AACnD,KAAK,wBAAwB;AAC7B,EAAE;;AAEF;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,oGAA6C,mBAAmB,EAAE;AAClE;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA,eAAe,EAAE,oCAAoC,2BAA2B,qGAA8C,mCAAmC,EAAE,GAAG,GAAG;;AAEzK;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,IAAI;AACT;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,mCAAmC;AACnC,gDAAgD,0BAA0B;AAC1E;AACA,KAAK,IAAI;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B,gDAAgD,EAAE,OAAO;AACzD,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,oBAAoB;AACpB,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,kMAAkM;AAClM,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,oCAAoC,EAAE;AACtC;AACA;AACA;AACA;AACA,sEAAwB;AACxB,uHAAmD,yEAAyE;AAC5H,aAAa;AACb;AACA,mCAAmC,EAAE;AACrC;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,+BAA+B,EAAE;AACjC,+BAA+B,EAAE;AACjC;AACA,+BAA+B,EAAE;AACjC,+BAA+B,EAAE;AACjC,+BAA+B,EAAE;AACjC,+BAA+B,EAAE;AACjC;AACA;AACA,iBAAiB;AACjB;AACA,+BAA+B,EAAE;AACjC,+BAA+B,EAAE;AACjC,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,+BAA+B,EAAE;AACjC,+BAA+B,EAAE;AACjC,yMAAoG,UAAU,2BAA2B,EAAE,EAAE;AAC7I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,uNAAuN;AACvN;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,oCAAoC,EAAE;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,kHAA8C,iHAAiH;AAC/J,mCAAmC,WAAW,2DAA2D;AACzG,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC,+BAA+B,EAAE;AACjC,+BAA+B,EAAE;AACjC,+BAA+B,EAAE;AACjC,+BAA+B,EAAE;AACjC;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC;AACD;AACA,KAAK,iEAAmB;AACxB;AACA;AACA,+CAA+C;AAC/C,KAAK,+DAAiB;AACtB,KAAK,2DAAe;AACpB,KAAK,yEAAoB;AACzB,KAAK,gCAAgC,yFAA2C,IAAI;AACpF,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,iBAAiB,+CAA+C;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;;AAEQ;AACR;;;;;;;;;;;;AC1vBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,y+B;;;;;;;;;;;ACAA,sBAAsB,uBAAuB,4BAA4B,EAAE,UAAU,iBAAiB,8CAA8C,mBAAmB,EAAE,WAAW,iBAAiB,iBAAiB,EAAE,YAAY,uBAAuB,qBAAqB,gBAAgB,uBAAuB,iBAAiB,EAAE,cAAc,0BAA0B,4BAA4B,EAAE,oBAAoB,+BAA+B,EAAE,G;;;;;;;;;;;;;;;;;;;;;;;;;;ACCzZ;AAC2B;AAGJ;AAQnE;IAGE,sBAAoB,cAA8B,EAAU,UAA6B;QAArE,mBAAc,GAAd,cAAc,CAAgB;QAAU,eAAU,GAAV,UAAU,CAAmB;QAFzF,gBAAW,GAAG,wDAAY,CAAC;IAEiE,CAAC;IAE7F,0BAAG,GAAH,UAAI,OAAY;QACd,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACvB,CAAC;IAPU,YAAY;QANxB,+DAAS,CAAC;YACT,eAAe,EAAE,qEAAuB,CAAC,MAAM;YAC/C,QAAQ,EAAE,SAAS;;;SAGpB,CAAC;yCAIoC,yDAAc,EAAsB,6DAAiB;OAH9E,YAAY,CAQxB;IAAD,mBAAC;CAAA;AARwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbkD;AAClB;AACZ;AACa;AACZ;AACJ;AACiB;AAED;AACoB;AAC/B;AACE;AACc;AACa;AACH;AACJ;AACS;AACd;AAE1D,sBAAuB,QAAQ,EAAE,OAAO;IAC5C,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,GAAG,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;AACrF,CAAC;AACK,qBAAsB,QAAQ;IAClC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,GAAG,QAAQ,CAAC,CAAC,CAAC;AACxE,CAAC;AA8CD;IACE,mBAAmB,MAAsB;QAAtB,WAAM,GAAN,MAAM,CAAgB;IACzC,CAAC;IAFU,SAAS;QA5CrB,8DAAQ,CAAC;YACR,SAAS,EAAE,CAAC,2DAAY,CAAC;YACzB,YAAY,EAAE;gBACZ,2DAAY;gBACZ,yFAAoB;gBACpB,kFAAmB;gBACnB,sFAAqB;gBACrB,2FAAuB;aACxB;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,2DAAa,CAAC,OAAO,CAAC,EAAE,CAAC;gBACzB,qEAAgB;gBAChB,0DAAW;gBACX,uDAAW,CAAC,OAAO,CAAC;oBAClB,SAAS,EAAE,0DAAe;oBAC1B,QAAQ,EAAE,yDAAc;iBACzB,CAAC;gBACF,0DAAe,CAAC,OAAO,CAAC;oBACtB,gBAAgB;oBAChB,eAAe;oBACf,IAAI,EAAE;wBACJ,IAAI,EAAE,qEAAW,CAAC,QAAQ;wBAC1B,YAAY;wBACZ,WAAW;qBACZ;iBACF,CAAC;gBACF,wEAAmB,CAAC,UAAU,EAAE;aACjC;YACD,SAAS,EAAE;gBACT,8DAAiB;gBACjB,4EAAoB;gBACpB;oBACE,OAAO,EAAE,sEAAiB;oBAC1B,QAAQ,EAAE,4EAAoB;oBAC9B,KAAK,EAAE,IAAI;iBACZ;gBACD;oBACE,OAAO,EAAE,sEAAiB;oBAC1B,WAAW,EAAE,8DAAiB;oBAC9B,KAAK,EAAE,IAAI;iBACZ;aACF;SACF,CAAC;yCAE2B,4DAAc;OAD9B,SAAS,CAkBrB;IAAD,gBAAC;CAAA;AAlBqB;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtEoF;AAC/D;AACH;AAExC,IAAY,aAKX;AALD,WAAY,aAAa;IACvB,4BAAW;IACX,8BAAa;IACb,4BAAW;IACX,kCAAiB;AACnB,CAAC,EALW,aAAa,KAAb,aAAa,QAKxB;AAED,IAAY,YAKX;AALD,WAAY,YAAY;IACtB,2CAAE;IACF,+CAAI;IACJ,iDAAK;IACL,+DAAY;AACd,CAAC,EALW,YAAY,KAAZ,YAAY,QAKvB;AAQM,IAAM,cAAc,GAAa;IACtC;QACE,EAAE,EAAE,CAAC;QACL,IAAI,EAAE,OAAO;QACb,KAAK,EAAE,KAAK;KACb;IACD;QACE,EAAE,EAAE,CAAC;QACL,IAAI,EAAE,MAAM;QACZ,KAAK,EAAE,OAAO;KACf;IACD;QACE,EAAE,EAAE,CAAC;QACL,IAAI,EAAE,OAAO;QACb,KAAK,EAAE,QAAQ;KAChB;IACD;QACE,EAAE,EAAE,CAAC;QACL,IAAI,EAAE,UAAU;QAChB,KAAK,EAAE,MAAM;KACd;IACD;QACE,EAAE,EAAE,CAAC;QACL,IAAI,EAAE,OAAO;QACb,KAAK,EAAE,MAAM;KACd;CACF,CAAC;AAGF;IADA;QAEE,YAAO,GAAa,cAAc,CAAC;QACnC,UAAK,GAAiB,YAAY,CAAC,EAAE,CAAC;IAyFxC,CAAC;IAvFC,qCAAS,GAAT,UAAU,GAAqB,EAAE,IAAiB;QACxC,mBAAI,EAAE,mBAAM,EAAE,aAAG,CAAS;QAClC,IAAM,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,iBAAO,IAAI,cAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAA7B,CAA6B,CAAC,CAAC;QAC7E,IAAM,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAElC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,+CAAE,CAAC,IAAI,iEAAY,CAAC;gBACzB,MAAM,EAAE,GAAG;gBACX,IAAI,EAAE,EAAE,KAAK,EAAE,mBAAmB,EAAC;aACpC,CAAC,CAAC,CAAC;QACN,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC;YACpD,MAAM,CAAC,+CAAE,CAAC,IAAI,iEAAY,CAAC;gBACzB,MAAM,EAAE,GAAG;gBACX,IAAI,EAAE,EAAE,KAAK,EAAE,cAAc,EAAC;aAC/B,CAAC,CAAC,CAAC;QACN,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,+CAAE,CAAC,IAAI,iEAAY,CAAC;gBACzB,MAAM,EAAE,GAAG;gBACX,IAAI,EAAE,EAAE,KAAK,EAAE,uBAAuB,EAAC;aACxC,CAAC,CAAC,CAAC;QACN,CAAC;QACD,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACf,KAAK,aAAa,CAAC,GAAG;gBACpB,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;oBACzB,MAAM,CAAC,+CAAE,CAAC,IAAI,iEAAY,CAAC;wBACzB,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAM,IAAI,aAAM,CAAC,EAAE,KAAK,EAAE,EAAhB,CAAgB,CAAC;wBACnD,MAAM,EAAE,GAAG;qBACZ,CAAC,CAAC,CAAC;gBACN,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,MAAM,CAAC,+CAAE,CAAC,IAAI,iEAAY,CAAC;wBACzB,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAM,IAAI,QAAC,EAAE,EAAE,EAAE,MAAM,CAAC,EAAE,EAAE,IAAI,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC,EAAtC,CAAsC,CAAC;wBACxE,MAAM,EAAE,GAAG;qBACZ,CAAC,CAAC,CAAC;gBACN,CAAC;YACH,KAAK,aAAa,CAAC,IAAI;gBACrB,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;gBAC9B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACxB,MAAM,CAAC,+CAAE,CAAC,IAAI,iEAAY,CAAC;oBACzB,IAAI;oBACJ,MAAM,EAAE,GAAG;iBACZ,CAAC,CAAC,CAAC;YACN,KAAK,aAAa,CAAC,GAAG;gBACpB,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;oBACzB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAC1B,IAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,gBAAM,IAAI,aAAM,IAAI,MAAM,CAAC,EAAE,KAAK,EAAE,EAA1B,CAA0B,CAAC,CAAC;oBAC3E,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;wBACf,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC;wBACnE,MAAM,CAAC,+CAAE,CAAC,IAAI,iEAAY,CAAC;4BACzB,IAAI;4BACJ,MAAM,EAAE,GAAG;yBACZ,CAAC,CAAC,CAAC;oBACN,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,MAAM,CAAC,+CAAE,CAAC,IAAI,iEAAY,CAAC;4BACzB,MAAM,EAAE,GAAG;4BACX,IAAI,EAAE,YAAY;yBACnB,CAAC,CAAC,CAAC;oBACN,CAAC;gBACH,CAAC;gBACD,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;YAC9B,KAAK,aAAa,CAAC,MAAM;gBACvB,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;oBACzB,IAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,gBAAM,IAAI,aAAM,CAAC,EAAE,KAAK,EAAE,EAAhB,CAAgB,CAAC,CAAC;oBACjE,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;wBACf,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;wBAClF,MAAM,CAAC,+CAAE,CAAC,IAAI,iEAAY,CAAC;4BACzB,IAAI,EAAE,EAAE,OAAO,EAAE,0BAA0B,GAAG,EAAE,EAAE;4BAClD,MAAM,EAAE,GAAG;yBACZ,CAAC,CAAC,CAAC;oBACN,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,MAAM,CAAC,+CAAE,CAAC,IAAI,iEAAY,CAAC;4BACzB,MAAM,EAAE,GAAG;4BACX,IAAI,EAAE,YAAY;yBACnB,CAAC,CAAC,CAAC;oBACN,CAAC;gBACH,CAAC;gBACD,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;YAC9B;gBACE,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;QAChC,CAAC;IACH,CAAC;IAED,yCAAa,GAAb;QACE,MAAM,CAAC,+CAAE,CAAC,IAAI,iEAAY,CAAC;YACzB,MAAM,EAAE,GAAG;YACX,IAAI,EAAE,sBAAsB;SAC7B,CAAC,CAAC,CAAC;IACN,CAAC;IA1FU,iBAAiB;QAD7B,gEAAU,EAAE;OACA,iBAAiB,CA2F7B;IAAD,wBAAC;CAAA;AA3F6B;;;;;;;;;;;;;;;;;;;;;;;;ACrDa;AAC0F;AAExF;AAG7C;IAAA;IAQA,CAAC;IAPC,wCAAS,GAAT,UAAU,GAAqB,EAAE,IAAiB;QAChD,OAAO,CAAC,GAAG,CAAI,GAAG,CAAC,MAAM,CAAC,WAAW,EAAE,SAAI,GAAG,CAAC,GAAG,SAAI,GAAG,CAAC,IAAM,CAAC,CAAC;QAClE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAC1B,6DAAM,CAAC,eAAK,IAAI,YAAK,CAAC,IAAI,KAAK,kEAAa,CAAC,QAAQ,EAArC,CAAqC,CAAC,EACtD,0DAAG,CAAC,UAAC,QAA2B,IAAK,cAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,IAAI,GAAG,EAAE,QAAQ,CAAC,IAAI,CAAC,EAAlD,CAAkD,CAAC,CACzF,CAAC;IACJ,CAAC;IAPU,oBAAoB;QADhC,gEAAU,EAAE;OACA,oBAAoB,CAQhC;IAAD,2BAAC;CAAA;AARgC;;;;;;;;;;;;ACNjC,sJAAsJ,KAAK,8BAA8B,yBAAyB,kC;;;;;;;;;;;;;;;;;;;;;;;;;;ACAnK;AACH;AAGmC;AAM/E;IAGE,8BAAoB,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;QAChD,IAAI,CAAC,YAAY,GAAG,cAAc,CAAC,MAAM,CAAC,0DAAe,CAAC,CAAC;IAC7D,CAAC;IAED,sCAAO,GAAP,UAAQ,MAAW;QACjB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC7B,CAAC;IATU,oBAAoB;QAJhC,+DAAS,CAAC;YACT,QAAQ,EAAE,iBAAiB;;SAE5B,CAAC;yCAIoC,yDAAc;OAHvC,oBAAoB,CAUhC;IAAD,2BAAC;CAAA;AAVgC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTmC;AAI9D,8BAA+B,EAAE;IACrC,MAAM,CAAC;QACH,SAAS,EAAE,kBAAQ;YAAI,QAAC,EAAE,WAAW,YAAI,GAAC,EAAE,IAAG,QAAQ,KAAE,EAAE,CAAC;;QAArC,CAAqC;QAC5D,MAAM,EAAE;YACN,WAAW,EAAE,UAAC,YAAY,EAAE,QAAQ,IAAK,qBACpC,YAAY,EACZ,QAAQ,EACX,EAHuC,CAGvC;SACH;QACD,GAAG,EAAE,kBAAgB,EAAI;KAC5B,CAAC;AACJ,CAAC;AAAA,CAAC;AAEI;IACJ,MAAM,CAAC;QACL,SAAS,EAAE,kBAAQ,IAAI,QAAC;YACtB,WAAW,EAAE,qEAAkB,CAAC,QAAQ,EAAE,gBAAM,IAAI,aAAM,CAAC,EAAE,EAAT,CAAS,CAAC;SAC/D,CAAC,EAFqB,CAErB;QACF,MAAM,EAAE;YACN,WAAW,EAAE,UAAC,WAAW,EAAE,OAAO,IAAK,qBAClC,WAAW,EACX,OAAO,EACV,EAHqC,CAGrC;SACH;QACD,GAAG,EAAE,cAAc;KACpB,CAAC;AACJ,CAAC;AAEK,iCAAkC,MAAM;IAC5C,MAAM,CAAC;QACL,IAAI,EAAE,MAAM;QACZ,gBAAgB,EAAE;YAChB,WAAW,EAAE,UAAC,YAAY;gBAAK,qBAC1B,YAAY,eACd,MAAM,CAAC,EAAE,IAAG,MAAM,OACnB;;YAH6B,CAG7B;SACH;QACD,SAAS,EAAE,kBAAQ;YAAI,QAAC,EAAE,WAAW,YAAI,GAAC,QAAQ,CAAC,EAAE,IAAG,QAAQ,KAAE,EAAE,CAAC;;QAA9C,CAA8C;QACrE,MAAM,EAAE;YACN,WAAW,EAAE,UAAC,YAAY,EAAE,QAAQ,IAAK,qBACpC,YAAY,EACZ,QAAQ,EACX,EAHuC,CAGvC;SACH;QACD,GAAG,EAAE,cAAc;KACpB,CAAC;AACJ,CAAC;AACK,iCAAkC,MAAM;IAC5C,MAAM,CAAC;QACL,IAAI,EAAE,MAAM;QACZ,gBAAgB,EAAE;YAChB,WAAW,EAAE,UAAC,YAAY;gBAAK,qBAC1B,YAAY,eACd,MAAM,CAAC,EAAE,IAAG,MAAM,OACnB;;YAH6B,CAG7B;SACH;QACD,OAAO,EAAE;YACP,MAAM,EAAE,KAAK;SACd;QACD,SAAS,EAAE,kBAAQ;YAAI,QAAC,EAAE,WAAW,YAAI,GAAC,QAAQ,CAAC,EAAE,IAAG,QAAQ,KAAE,EAAE,CAAC;;QAA9C,CAA8C;QACrE,MAAM,EAAE;YACN,WAAW,EAAE,UAAC,YAAY,EAAE,QAAQ,IAAK,qBACpC,YAAY,EACZ,QAAQ,EACX,EAHuC,CAGvC;SACH;QACD,GAAG,EAAE,kBAAgB,MAAM,CAAC,EAAI;KACjC,CAAC;AACJ,CAAC;AACK,iCAAkC,EAAE;IACxC,MAAM,CAAC;QACL,gBAAgB,EAAE;YAChB,WAAW,EAAE,sBAAY;gBACvB,IAAQ,OAAI,EAAJ,0BAAa,EAAE,oEAAuB,CAAC;gBAC/C,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;SACF;QACD,OAAO,EAAE;YACP,MAAM,EAAE,QAAQ;SACjB;QACD,MAAM,EAAE;YACN,WAAW,EAAE,sBAAY;gBACvB,IAAQ,OAAI,EAAJ,0BAAa,EAAE,oEAAuB,CAAC;gBAC/C,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;SACF;QACD,GAAG,EAAE,kBAAgB,EAAI;KAC1B,CAAC;AACJ,CAAC;AAEK,4BAA6B,QAAQ;IACzC,MAAM,CAAC,eAAK;QACV,EAAE,CAAC,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC;QAC/C,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,SAAS,CAAC;QACrB,CAAC;IACH,CAAC,CAAC;AACJ,CAAC;AACK,4BAA6B,CAAC;IAClC,MAAM,CAAC,qEAAkB,CAAC,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;AACrD,CAAC;;;;;;;;;;;;AC1GD,qDAAqD,eAAe,2EAA2E,uB;;;;;;;;;;;;;;;;;;;;;;;;;ACAhE;AAEoC;AAQnH;IAIE,+BAAmB,cAAiC;QAAjC,mBAAc,GAAd,cAAc,CAAmB;QAH3C,WAAM,GAAW,SAAS,CAAC;QAC1B,cAAS,GAAsB,IAAI,0DAAY,EAAE,CAAC;IAEL,CAAC;8BAJ7C,qBAAqB;IACvB;QAAR,2DAAK,EAAE;;yDAA4B;IAC1B;QAAT,4DAAM,EAAE;kCAAY,0DAAY;4DAA2B;IAFjD,qBAAqB;QANjC,+DAAS,CAAC;YACT,eAAe,EAAE,qEAAuB,CAAC,MAAM;YAC/C,SAAS,EAAE,CAAC,8EAA2B,CAAC,uBAAqB,CAAC,CAAC;YAC/D,QAAQ,EAAE,kBAAkB;;SAE7B,CAAC;yCAKmC,+DAAiB;OAJzC,qBAAqB,CAKjC;IAAD,4BAAC;;CAAA;AALiC;;;;;;;;;;;;ACVlC,wEAAwE,0JAA0J,aAAa,kGAAkG,4CAA4C,wtB;;;;;;;;;;;;;;;;;;;;;;;;;;ACAlT;AASxD;AACkG;AACtC;AAQ/E;IAOE,6BAAoB,cAA8B,EAAS,cAAiC;QAAxE,mBAAc,GAAd,cAAc,CAAgB;QAAS,mBAAc,GAAd,cAAc,CAAmB;QALlF,cAAS,GAAsB,IAAI,0DAAY,EAAE,CAAC;QAE5D,gBAAW,GAA6B,EAAE,CAAC;QAC3C,cAAS,GAAW,EAAE,CAAC;IAEwE,CAAC;4BAPrF,mBAAmB;IAS9B,6CAAe,GAAf,UAAgB,EAAU;QACxB,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,qEAAoB,CAAC,EAAE,CAAC,EAAE,EAAE,QAAQ,EAAE,mEAAkB,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAC3F,CAAC;IAED,kCAAI,GAAJ,UAAK,MAAc;QACjB,IAAM,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,MAAM,CAAC,IAAI,GAAG,SAAS,EAAE,CAAC,CAAC;QACnF,IAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,wEAAuB,CAAC,aAAa,CAAC,EAAE,EAAE,QAAQ,EAAE,mEAAkB,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAC3H,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;IAC/C,CAAC;IAED,oCAAM,GAAN,UAAO,MAAc;QACnB,IAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,wEAAuB,CAAC,MAAM,CAAC,CAAC,CAAC;QACvE,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QAC7C,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,CAAC;IAED,oCAAM,GAAN,UAAO,EAAU;QACf,IAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,wEAAuB,CAAC,EAAE,CAAC,CAAC,CAAC;QACnE,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;IAC/C,CAAC;IA3BQ;QAAR,2DAAK,EAAE;;uDAAkB;IAChB;QAAT,4DAAM,EAAE;kCAAY,0DAAY;0DAA2B;IAFjD,mBAAmB;QAN/B,+DAAS,CAAC;YACT,eAAe,EAAE,qEAAuB,CAAC,MAAM;YAC/C,SAAS,EAAE,CAAC,8EAA2B,CAAC,qBAAmB,CAAC,CAAC;YAC7D,QAAQ,EAAE,gBAAgB;;SAE3B,CAAC;yCAQoC,yDAAc,EAAyB,+DAAiB;OAPjF,mBAAmB,CA6B/B;IAAD,0BAAC;;CAAA;AA7B+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBkB;AACyB;AAC/B;AACQ;AACqB;AAGzE;IAA6C,2CAAuB;IAClE,iCAAoB,OAAuB,EAAS,cAAiC,EAAqB,IAA0B;QAApI,YACE,kBAAM,OAAO,EAAE,cAAc,EAAE,IAAI,CAAC,SAErC;QAHmB,aAAO,GAAP,OAAO,CAAgB;QAAS,oBAAc,GAAd,cAAc,CAAmB;QAAqB,UAAI,GAAJ,IAAI,CAAsB;QAElI,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,yEAAwB,EAAE,EAAE,EAAE,QAAQ,EAAE,2DAAkB,EAAE,CAAC,CAAC;;IAChG,CAAC;IAJU,uBAAuB;QADnC,+DAAS,CAAC,EAAE,QAAQ,EAAE,kBAAkB,EAAE,CAAC;QAE8C,yEAAQ,EAAE;yCAArE,yDAAc,EAAyB,+DAAiB,EAA2B,+DAAoB;OADzH,uBAAuB,CAKnC;IAAD,8BAAC;CAAA,CAL4C,kEAAuB,GAKnE;AALmC;;;;;;;;;;;;;;;;ACP9B,0BAA2B,KAAK;IACpC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC;AACzB,CAAC;AACK,yBAA0B,KAAK;IACnC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC;AACxB,CAAC;;;;;;;;;;;;;;;;ACLqC;AACtC,mFAAmF;AACnF,8FAA8F;AAC9F,yEAAyE;AACzE,gFAAgF;AAEzE,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;IACjB,QAAQ,EAAE,mDAAQ,CAAC,IAAI;CACxB,CAAC;;;;;;;;;;;;;;;;;;ACT6C;AAC4B;AAE7B;AACW;AAEzD,EAAE,CAAC,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,oEAAc,EAAE,CAAC;AACnB,CAAC;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,0DAAS,CAAC,CAAC","file":"main.js","sourcesContent":["import { requestAsync, mutateAsync, requestStart, requestFailure, requestSuccess, mutateStart, mutateSuccess, mutateFailure } from 'redux-query/dist/es/actions';\nimport { InjectionToken, Inject, Injectable, forwardRef, ChangeDetectorRef, Optional, Directive, EventEmitter, Input, Output, NgModule } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { withoutPath } from 'redux-query/dist/es/reducers/entities';\nexport { default as entitiesReducer } from 'redux-query/dist/es/reducers/entities';\nimport { take, filter, catchError, flatMap, map, mergeMap, retryWhen, tap, zip } from 'rxjs/operators';\nimport { __decorate, __metadata } from 'tslib';\nimport { HttpClient, HttpHeaders, HttpClientModule } from '@angular/common/http';\nimport { Actions, Effect, EffectsModule } from '@ngrx/effects';\nimport { REQUEST_ASYNC } from 'redux-query/dist/es/constants/action-types';\nimport { GET, POST } from 'redux-query/dist/es/constants/http-methods';\nimport { getQueryKey } from 'redux-query/dist/es/lib/query-key';\nimport { Observable, of, range, timer } from 'rxjs';\nexport { default as queriesReducer } from 'redux-query/dist/es/reducers/queries';\nexport { queryCount, lastUpdated, status, isPending, isFinished } from 'redux-query/dist/es/selectors/query';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ REQUEST_ASYNC$1 = '[ngrx-query] REQUEST_ASYNC';\nvar /** @type {?} */ MUTATE_ASYNC = '[ngrx-query] MUTATE_ASYNC';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ requestAsync$1 = function (params) { return Object.assign({}, requestAsync(params), { type: REQUEST_ASYNC$1 }); };\nvar /** @type {?} */ mutateAsync$1 = function (params) { return Object.assign({}, mutateAsync(params), { type: MUTATE_ASYNC }); };\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ statusCodes = {\n    GATEWAY_TIMEOUT: 504,\n    REQUEST_TIMEOUT: 408,\n    // client took too long\n    SERVICE_UNAVAILABLE: 503,\n    TOO_MANY_REQUESTS: 429,\n    UNKNOWN: 0,\n};\nvar /** @type {?} */ NGRX_QUERY_CONFIG = new InjectionToken('NGRX_QUERY_CONFIG');\nvar /** @type {?} */ defaultEntitiesSelector = function (state) { return state.entities; };\nvar /** @type {?} */ defaultQueriesSelector = function (state) { return state.queries; };\nvar /** @type {?} */ defaultBackoffConfig = {\n    maxAttempts: 5,\n    maxDuration: 5000,\n    minDuration: 300,\n};\nvar /** @type {?} */ defaultRetryableStatusCodes = [\n    statusCodes.UNKNOWN,\n    // normally means a failed connection\n    statusCodes.REQUEST_TIMEOUT,\n    statusCodes.TOO_MANY_REQUESTS,\n    // hopefully backoff stops this getting worse\n    statusCodes.SERVICE_UNAVAILABLE,\n    statusCodes.GATEWAY_TIMEOUT,\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ConnectService = /** @class */ (function () {\n    /**\n     * @param {?} store\n     * @param {?} config\n     */\n    function ConnectService(store, config) {\n        this.store = store;\n        this.config = config;\n    }\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    ConnectService.prototype.mutateAsync = function (config) {\n        this.store.dispatch(mutateAsync$1(config));\n        return this.select(config.selector);\n    };\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    ConnectService.prototype.requestAsync = function (config) {\n        this.store.dispatch(requestAsync$1(config));\n        return this.select(config.selector);\n    };\n    /**\n     * @param {?} selector\n     * @return {?}\n     */\n    ConnectService.prototype.select = function (selector) {\n        return this.store.select(selector || this.config && this.config.entitiesSelector || defaultEntitiesSelector);\n    };\n    return ConnectService;\n}());\nConnectService.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nConnectService.ctorParameters = function () { return [\n    { type: Store, },\n    { type: undefined, decorators: [{ type: Inject, args: [NGRX_QUERY_CONFIG,] },] },\n]; };\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @abstract\n */\nvar NqConnectedComponent = /** @class */ (function () {\n    function NqConnectedComponent() {\n    }\n    return NqConnectedComponent;\n}());\n/**\n * @param {?} component\n * @param {?=} parentType\n * @return {?}\n */\nfunction provideNqConnectedComponent(component, parentType) {\n    return { provide: parentType || NqConnectedComponent, useExisting: forwardRef(function () { return component; }) };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ConnectRequestDirective = /** @class */ (function () {\n    /**\n     * @param {?} connectService\n     * @param {?} changeDetector\n     * @param {?} host\n     */\n    function ConnectRequestDirective(connectService, changeDetector, host) {\n        this.connectService = connectService;\n        this.changeDetector = changeDetector;\n        this.host = host;\n        // tslint:disable-next-line:no-input-rename\n        this.config = /** @type {?} */ (undefined);\n        this.response = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    ConnectRequestDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        this.subscribe(this.config);\n        if (this.host) {\n            this.host.nqRefresh.subscribe(function () { return _this.forceRequest(); });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    ConnectRequestDirective.prototype.ngOnDestroy = function () {\n        this.unsubscribe();\n    };\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    ConnectRequestDirective.prototype.subscribe = function (config) {\n        var _this = this;\n        this.unsubscribe();\n        this.subscription = this.connectService.requestAsync(config).subscribe(function (response) {\n            if (_this.response) {\n                if (_this.host) {\n                    setTimeout(function () {\n                        _this.host.nqData = response;\n                        if (_this.host.changeDetector) {\n                            _this.host.changeDetector.markForCheck();\n                        }\n                    });\n                }\n                _this.response.emit(response);\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    ConnectRequestDirective.prototype.unsubscribe = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    ConnectRequestDirective.prototype.forceRequest = function () {\n        this.subscribe(Object.assign({}, this.config, { force: true }));\n    };\n    return ConnectRequestDirective;\n}());\nConnectRequestDirective.decorators = [\n    { type: Directive, args: [{\n                exportAs: 'nqConnect',\n                selector: '[nqConnect]',\n            },] },\n];\n/** @nocollapse */\nConnectRequestDirective.ctorParameters = function () { return [\n    { type: ConnectService, },\n    { type: ChangeDetectorRef, },\n    { type: NqConnectedComponent, decorators: [{ type: Optional },] },\n]; };\nConnectRequestDirective.propDecorators = {\n    \"config\": [{ type: Input, args: ['nqConnect',] },],\n    \"response\": [{ type: Output },],\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction objectsByIdToArray(obj) {\n    if (!obj) {\n        return [];\n    }\n    return Object.keys(obj).map(function (key) { return obj[key]; });\n}\n/**\n * @param {?} array\n * @param {?} keyOf\n * @return {?}\n */\nfunction arrayToObjectsById(array, keyOf) {\n    return array.reduce(function (objectsById, item) {\n        objectsById[keyOf(item)] = item;\n        return objectsById;\n    }, {});\n}\n/**\n * @template E\n */\nvar ConnectEntityService = /** @class */ (function () {\n    /**\n     * @param {?} connectService\n     */\n    function ConnectEntityService(connectService) {\n        this.connectService = connectService;\n    }\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    ConnectEntityService.prototype.init = function (config) {\n        this.config = config;\n    };\n    /**\n     * @return {?}\n     */\n    ConnectEntityService.prototype.list = function () {\n        var _this = this;\n        return this.connectService.requestAsync({\n            selector: function (s) { return objectsByIdToArray(s.entities[_this.config.entityTypeName]); },\n            transform: function (response) {\n                return (_a = {}, _a[_this.config.entityTypeName] = arrayToObjectsById(response, _this.config.idSelector), _a);\n                var _a;\n            },\n            update: (_a = {},\n                _a[this.config.entityTypeName] = function (prevEntities, entities) { return (Object.assign({}, prevEntities, entities)); },\n                _a),\n            url: this.config.endpoints.list,\n        });\n        var _a;\n    };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    ConnectEntityService.prototype.get = function (id) {\n        var _this = this;\n        return this.connectService.requestAsync({\n            selector: function (s) { return s.entities[_this.config.entityTypeName] && s.entities[_this.config.entityTypeName][id]; },\n            transform: function (response) {\n                return (_a = {}, _a[_this.config.entityTypeName] = (_b = {}, _b[id] = response, _b), _a);\n                var _a, _b;\n            },\n            update: (_a = {},\n                _a[this.config.entityTypeName] = function (prevEntities, entities) { return (Object.assign({}, prevEntities, entities)); },\n                _a),\n            url: this.config.endpoints.getById(id),\n        });\n        var _a;\n    };\n    /**\n     * @param {?} entity\n     * @return {?}\n     */\n    ConnectEntityService.prototype.create = function (entity) {\n        var _this = this;\n        return this.connectService.mutateAsync({\n            body: entity,\n            optimisticUpdate: (_a = {},\n                _a[this.config.entityTypeName] = function (prevEntities) {\n                    return (Object.assign({}, prevEntities, (_a = {}, _a[_this.config.idSelector(entity)] = entity, _a)));\n                    var _a;\n                },\n                _a),\n            transform: function (response) {\n                return (_a = {}, _a[_this.config.entityTypeName] = (_b = {}, _b[_this.config.idSelector(response)] = response, _b), _a);\n                var _a, _b;\n            },\n            update: (_b = {},\n                _b[this.config.entityTypeName] = function (prevEntities, entities) { return (Object.assign({}, prevEntities, entities)); },\n                _b),\n            url: this.config.endpoints.create,\n        });\n        var _a, _b;\n    };\n    /**\n     * @param {?} entity\n     * @return {?}\n     */\n    ConnectEntityService.prototype.edit = function (entity) {\n        var _this = this;\n        return this.connectService.mutateAsync({\n            body: entity,\n            optimisticUpdate: (_a = {},\n                _a[this.config.entityTypeName] = function (prevEntities) {\n                    return (Object.assign({}, prevEntities, (_a = {}, _a[_this.config.idSelector(entity)] = entity, _a)));\n                    var _a;\n                },\n                _a),\n            options: {\n                method: 'PUT',\n            },\n            selector: function (s) { return s.entities[_this.config.entityTypeName][_this.config.idSelector(entity)]; },\n            transform: function (response) {\n                return (_a = {}, _a[_this.config.entityTypeName] = (_b = {}, _b[_this.config.idSelector(response)] = response, _b), _a);\n                var _a, _b;\n            },\n            update: (_b = {},\n                _b[this.config.entityTypeName] = function (prevEntities, entities) { return (Object.assign({}, prevEntities, entities)); },\n                _b),\n            url: this.config.endpoints.update,\n        });\n        var _a, _b;\n    };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    ConnectEntityService.prototype.delete = function (id) {\n        var _this = this;\n        return this.connectService.mutateAsync({\n            selector: function (s) { return s.entities[_this.config.entityTypeName][id]; },\n            optimisticUpdate: (_a = {},\n                _a[this.config.entityTypeName] = function (prevEntities) { return withoutPath(prevEntities, [id]); },\n                _a),\n            options: {\n                method: 'DELETE',\n            },\n            update: (_b = {},\n                _b[this.config.entityTypeName] = function (prevEntities) { return withoutPath(prevEntities, [id]); },\n                _b),\n            url: this.config.endpoints.remove(id + ''),\n        });\n        var _a, _b;\n    };\n    return ConnectEntityService;\n}());\nConnectEntityService.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nConnectEntityService.ctorParameters = function () { return [\n    { type: ConnectService, },\n]; };\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @template T\n * @param {?} o$\n * @return {?}\n */\nfunction getLatest(o$) {\n    var /** @type {?} */ result;\n    o$.pipe(take(1)).subscribe(function (x) { return result = x; });\n    return result;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} condition\n * @param {?} message\n * @param {?=} context\n * @return {?}\n */\nfunction invariant(condition, message, context) {\n    if (!condition) {\n        var /** @type {?} */ errorMessage = message;\n        if (context) {\n            errorMessage = (message.indexOf('%s') !== -1) ?\n                message.replace('%s', context) :\n                errorMessage = message + \": \" + context;\n        }\n        throw new Error(errorMessage);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @enum {number} */\nvar MockMode = {\n    None: 0,\n    Record: 1,\n    Mock: 2,\n};\nMockMode[MockMode.None] = \"None\";\nMockMode[MockMode.Record] = \"Record\";\nMockMode[MockMode.Mock] = \"Mock\";\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ ofType = function (actionType) { return function (source) { return source.pipe(filter(function (action) { return action.type === actionType; })); }; };\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} x\n * @param {?=} y\n * @param {?=} z\n * @return {?}\n */\nfunction identity(x, y, z) {\n    return x;\n}\n/**\n * @param {?} optimisticUpdate\n * @param {?} entities\n * @return {?}\n */\nfunction optimisticUpdateEntities(optimisticUpdate, entities) {\n    return Object.keys(optimisticUpdate).reduce(function (accum, key) {\n        if (optimisticUpdate[key]) {\n            accum[key] = optimisticUpdate[key](entities[key]);\n        }\n        else {\n            accum[key] = entities[key];\n        }\n        return accum;\n    }, {});\n}\n/**\n * @param {?} update\n * @param {?} entities\n * @param {?} transformed\n * @return {?}\n */\nfunction updateEntities(update, entities, transformed) {\n    // If update not supplied, then no change to entities should be made\n    return Object.keys(update || {}).reduce(function (accum, key) {\n        accum[key] = update[key]((entities || {})[key], (transformed || {})[key]);\n        return accum;\n    }, {});\n}\nvar NgrxQueryEffects = /** @class */ (function () {\n    /**\n     * @param {?} actions$\n     * @param {?} store\n     * @param {?} http\n     * @param {?} config\n     */\n    function NgrxQueryEffects(actions$, store, http, config) {\n        var _this = this;\n        this.actions$ = actions$;\n        this.store = store;\n        this.http = http;\n        this.config = config;\n        this.requestAsync = this.actions$.pipe(ofType(REQUEST_ASYNC$1), map(function (action) {\n            var url = action.url, force = action.force, retry = action.retry, update = action.update;\n            invariant(!!url, 'Missing required `url` field in action handler');\n            invariant(!!update, 'Missing required `update` field in action handler');\n            var /** @type {?} */ queryKey = getQueryKey(action);\n            var /** @type {?} */ state = getLatest(_this.store);\n            var /** @type {?} */ queries = _this.config && _this.config.queriesSelector && _this.config.queriesSelector(state)\n                || defaultQueriesSelector(state);\n            var /** @type {?} */ queriesState = queries[queryKey];\n            var _a = queriesState || /** @type {?} */ ({}), isPending = _a.isPending, status = _a.status;\n            var /** @type {?} */ hasSucceeded = status >= 200 && status < 300;\n            var /** @type {?} */ attemptRequest = force || !queriesState || (retry !== false && !isPending && !hasSucceeded);\n            return { attemptRequest: attemptRequest, action: action };\n        }), filter(function (_a) {\n            var attemptRequest = _a.attemptRequest;\n            return attemptRequest;\n        }), mergeMap(function (_a) {\n            var action = _a.action;\n            var url = action.url, body = action.body, _b = action.transform, transform = _b === void 0 ? identity : _b, update = action.update, _c = action.options, options = _c === void 0 ? ({}) : _c, meta = action.meta;\n            var /** @type {?} */ queryKey = getQueryKey(action);\n            var /** @type {?} */ start = new Date();\n            var _d = options.method, method = _d === void 0 ? GET : _d;\n            var /** @type {?} */ request = {\n                body: body,\n                headers: options.headers,\n                method: method,\n                observe: /** @type {?} */ ((options.observe || 'response')),\n                responseType: options.responseType,\n                url: url,\n                withCredentials: options.credentials === 'include',\n            };\n            return of({}).pipe(tap(function () {\n                _this.store.dispatch(requestStart({ url: url, body: body, request: request, meta: meta, queryKey: queryKey }));\n            }), filter(function () {\n                if (_this.config && _this.config.mock && _this.config.mock.mode === MockMode.Mock) {\n                    var /** @type {?} */ mockActions = _this.config.mock.getMockData(queryKey);\n                    if (mockActions) {\n                        mockActions.forEach(function (mockAction) {\n                            _this.store.dispatch(mockAction);\n                        });\n                    }\n                    else {\n                        _this.store.dispatch(requestFailure({\n                            url: url,\n                            body: body,\n                            status: 500,\n                            responseBody: 'No mock data recorded for ' + queryKey,\n                            meta: meta,\n                            queryKey: queryKey,\n                        }));\n                    }\n                    return false;\n                }\n                return true;\n            }), mergeMap(function () {\n                return _this.http.request(request.method, url, request)\n                    .pipe(map(function (response) {\n                    if (!response.ok) {\n                        throw response;\n                    }\n                    return response;\n                }));\n            }), map(function (response) {\n                var /** @type {?} */ callbackState = getLatest(_this.store);\n                var /** @type {?} */ entities = _this.config && _this.config.entitiesSelector && _this.config.entitiesSelector(callbackState)\n                    || defaultEntitiesSelector(callbackState);\n                var /** @type {?} */ parsedResponse = response.body;\n                var /** @type {?} */ transformed = transform(parsedResponse, response.body, response);\n                var /** @type {?} */ newEntities = updateEntities(update, entities, transformed);\n                var /** @type {?} */ requestSuccessAction = requestSuccess({\n                    url: url, body: body, status: response.status, entities: newEntities, meta: meta, queryKey: queryKey, responseBody: parsedResponse,\n                    responseText: response.body, responseHeaders: response.headers\n                });\n                _this.store.dispatch(requestSuccessAction);\n                var /** @type {?} */ end = new Date();\n                var /** @type {?} */ duration = end.valueOf() - start.valueOf();\n                var /** @type {?} */ requestAsyncAction = {\n                    body: parsedResponse,\n                    duration: duration,\n                    entities: newEntities,\n                    meta: meta,\n                    status: response.status,\n                    text: response.body,\n                    transformed: transformed,\n                    type: REQUEST_ASYNC,\n                };\n                if (_this.config && _this.config.mock && _this.config.mock.mode === MockMode.Record) {\n                    _this.config.mock.saveMockData(queryKey, [requestSuccessAction, requestAsyncAction]);\n                }\n                return requestAsyncAction;\n            }), retryWhen(function (attempts) {\n                var /** @type {?} */ backoff = _this.config && _this.config.backoff || defaultBackoffConfig;\n                var /** @type {?} */ retryableStatusCodes = _this.config && _this.config.retryableStatusCodes || defaultRetryableStatusCodes;\n                return range(1, backoff.maxAttempts + 1).pipe(zip(attempts, function (i, response) { return ({ response: response, i: i }); }), flatMap(function (_a) {\n                    var response = _a.response, i = _a.i;\n                    if (i < backoff.maxAttempts && retryableStatusCodes.indexOf(response.status) >= 0) {\n                        // Delay retry by min duration the first attempt, up to max duration on the (maxAttempts)th attempt\n                        return timer(backoff.minDuration +\n                            (i - 1) * (backoff.maxDuration - backoff.minDuration) / backoff.maxAttempts);\n                    }\n                    else {\n                        // Tried maxAttempts, now fail\n                        throw response;\n                    }\n                }));\n            }), catchError(function (errResponse, caught) {\n                if (errResponse.error instanceof Error) {\n                    throw errResponse.error;\n                }\n                var /** @type {?} */ requestFailureAction = requestFailure({\n                    url: url,\n                    body: body,\n                    status: errResponse.status,\n                    responseBody: errResponse.error,\n                    meta: meta,\n                    queryKey: queryKey,\n                    responseText: errResponse.error,\n                    responseHeaders: errResponse.headers\n                });\n                if (_this.config && _this.config.mock && _this.config.mock.mode === MockMode.Record) {\n                    _this.config.mock.saveMockData(queryKey, [requestFailureAction]);\n                }\n                return of(requestFailureAction);\n            }));\n        }));\n        this.mutateAsync = this.actions$.pipe(ofType(MUTATE_ASYNC), map(function (action) {\n            var url = action.url, _a = action.transform, update = action.update, body = action.body, meta = action.meta, optimisticUpdate = action.optimisticUpdate, _b = action.options, options = _b === void 0 ? ({}) : _b;\n            invariant(!!url, 'Missing required `url` field in action handler');\n            var /** @type {?} */ state = getLatest(_this.store);\n            var /** @type {?} */ entities = _this.config && _this.config.entitiesSelector && _this.config.entitiesSelector(state)\n                || defaultEntitiesSelector(state);\n            var /** @type {?} */ optimisticEntities;\n            if (optimisticUpdate) {\n                optimisticEntities = optimisticUpdateEntities(optimisticUpdate, entities);\n            }\n            var /** @type {?} */ queryKey = getQueryKey(action);\n            // const start = new Date();\n            var _c = options.method, method = _c === void 0 ? POST : _c;\n            var /** @type {?} */ request = {\n                body: body,\n                headers: new HttpHeaders(options.headers),\n                method: method,\n                observe: /** @type {?} */ ((options.observe || 'response')),\n                responseType: options.responseType,\n                url: url,\n                withCredentials: options.credentials === 'include',\n            };\n            // Note: only the entities that are included in `optimisticUpdate` will be passed along in the\n            // `mutateStart` action as `optimisticEntities`\n            _this.store.dispatch(mutateStart({ url: url, body: body, request: request, optimisticEntities: optimisticEntities, queryKey: queryKey, meta: meta }));\n            return Object.assign({}, action, { request: request, entities: entities, queryKey: queryKey });\n        }), filter(function (action) {\n            if (!_this.config || !_this.config.mock || _this.config.mock.mode !== MockMode.Mock) {\n                // Not mocking so continue\n                return true;\n            }\n            var url = action.url, body = action.body, meta = action.meta, queryKey = action.queryKey;\n            var /** @type {?} */ mockActions = _this.config.mock.getMockData(queryKey);\n            if (mockActions) {\n                mockActions.forEach(function (mockAction) {\n                    _this.store.dispatch(mockAction);\n                });\n            }\n            else {\n                _this.store.dispatch(requestFailure({\n                    url: url,\n                    body: body,\n                    status: 500,\n                    responseBody: 'No mock data recorded for ' + queryKey,\n                    meta: meta,\n                    queryKey: queryKey,\n                }));\n            }\n            // Dispatched mock actions so abort network call\n            return false;\n        }), mergeMap(function (action) {\n            var url = action.url, _a = action.transform, transform = _a === void 0 ? identity : _a, update = action.update, body = action.body, meta = action.meta, request = action.request, entities = action.entities, queryKey = action.queryKey;\n            return _this.http.request(request.method, url, request).pipe(map(function (response) {\n                if (!response.ok) {\n                    throw response;\n                }\n                var /** @type {?} */ status = (response && response.status) || 0;\n                var /** @type {?} */ responseBody = (response && response.body) || undefined;\n                var /** @type {?} */ responseText = (response && response.body) || undefined;\n                var /** @type {?} */ transformed = transform(responseBody, responseText, response);\n                var /** @type {?} */ newEntities = updateEntities(update, entities, transformed);\n                return mutateSuccess({\n                    url: url, body: body, status: status, entities: newEntities, queryKey: queryKey, responseBody: responseBody, responseText: responseText, responseHeaders: response.headers, meta: meta\n                });\n            }), catchError(function (errResponse) {\n                if (errResponse.error instanceof Error) {\n                    throw errResponse.error;\n                }\n                return of(mutateFailure({\n                    url: url, body: body, status: errResponse.status, rolledBackEntities: entities, queryKey: queryKey,\n                    responseBody: errResponse.error, responseText: errResponse.error, responseHeaders: errResponse.headers, meta: meta\n                }));\n            }));\n        }));\n    }\n    return NgrxQueryEffects;\n}());\nNgrxQueryEffects.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nNgrxQueryEffects.ctorParameters = function () { return [\n    { type: Actions, },\n    { type: Store, },\n    { type: HttpClient, },\n    { type: undefined, decorators: [{ type: Inject, args: [NGRX_QUERY_CONFIG,] },] },\n]; };\n__decorate([\n    Effect(),\n    __metadata(\"design:type\", Observable)\n], NgrxQueryEffects.prototype, \"requestAsync\", void 0);\n__decorate([\n    Effect(),\n    __metadata(\"design:type\", Observable)\n], NgrxQueryEffects.prototype, \"mutateAsync\", void 0);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgrxQueryModule = /** @class */ (function () {\n    function NgrxQueryModule() {\n    }\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    NgrxQueryModule.forRoot = function (config) {\n        return {\n            ngModule: NgrxQueryModule,\n            providers: [\n                { provide: NGRX_QUERY_CONFIG, useValue: config },\n                ConnectService,\n                ConnectEntityService,\n            ],\n        };\n    };\n    return NgrxQueryModule;\n}());\nNgrxQueryModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    ConnectRequestDirective,\n                ],\n                exports: [\n                    ConnectRequestDirective,\n                ],\n                imports: [\n                    EffectsModule.forFeature([NgrxQueryEffects]),\n                    HttpClientModule,\n                ],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { NgrxQueryModule, NgrxQueryEffects, ConnectService, ConnectEntityService, arrayToObjectsById, objectsByIdToArray, ConnectRequestDirective, NqConnectedComponent, provideNqConnectedComponent, NGRX_QUERY_CONFIG, requestAsync$1 as requestAsync, mutateAsync$1 as mutateAsync, MockMode };\n//# sourceMappingURL=ngrx-query.js.map\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<header>\\n  <h1 class=\\\"title\\\">Ngrx Query</h1>\\n</header>\\n<aside>\\n  <nq-queries-list></nq-queries-list>\\n</aside>\\n<main>\\n  <h3>Server Status</h3>\\n  <label>\\n    <input type=\\\"radio\\\" [(ngModel)]=\\\"mockServer.state\\\" name=\\\"serverState\\\" [value]=\\\"serverState.ON\\\">On</label>\\n  <br>\\n  <label>\\n    <input type=\\\"radio\\\" [(ngModel)]=\\\"mockServer.state\\\" name=\\\"serverState\\\" [value]=\\\"serverState.BUSY\\\">Busy</label>\\n  <br>\\n  <label>\\n    <input type=\\\"radio\\\" [(ngModel)]=\\\"mockServer.state\\\" name=\\\"serverState\\\" [value]=\\\"serverState.ERROR\\\">Error</label>\\n  <br>\\n\\n  <p>Open the console to see the fake server calls (using MockBackend).</p>\\n\\n  <h3>Connected Element/Component</h3>\\n  <label for=\\\"isShown\\\">Show List?</label>\\n  <input id=\\\"isShown\\\" type=\\\"checkbox\\\" [(ngModel)]=\\\"isShown\\\">\\n  <nq-ranger-list *ngIf=\\\"isShown\\\" rangerListData></nq-ranger-list>\\n</main>\\n<footer>\\n  <a href=\\\"https://github.com/isaacplmann/ngrx-query\\\">Ngrx Query</a>\\n</footer>\\n\"","module.exports = \"h1 {\\n  text-align: center;\\n  font-family: sans-serif; }\\n\\nmain {\\n  padding: 1em;\\n  font-family: Arial, Helvetica, sans-serif;\\n  display: block; }\\n\\naside {\\n  float: right;\\n  width: 300px; }\\n\\nfooter {\\n  text-align: center;\\n  font-size: 0.8em;\\n  width: 100%;\\n  position: absolute;\\n  bottom: 20px; }\\n\\nfooter a {\\n  text-decoration: none;\\n  font-family: sans-serif; }\\n\\nfooter a:hover {\\n  text-decoration: underline; }\\n\"","import { createGetRangerListQuery, rangerListSelector } from './ranger/queries';\nimport { ConnectService } from 'ngrx-query';\nimport { MockServerService, Ranger, SERVER_STATE } from './mockServer';\nimport { arrayToObjectsById, objectsByIdToArray } from 'ngrx-query';\nimport { ConnectRequestParams } from 'ngrx-query';\nimport { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'nq-demo',\n  styleUrls: ['./app.component.scss'],\n  templateUrl: './app.component.html',\n})\nexport class AppComponent {\n  serverState = SERVER_STATE;\n\n  constructor(private connectService: ConnectService, private mockServer: MockServerService) {}\n\n  log(message: any): void {\n    console.log(message);\n  }\n}\n","import { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { ApplicationRef, NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\n\nimport { environment } from '../environments/environment';\nimport { entitiesReducer, NgrxQueryModule, queriesReducer } from 'ngrx-query';\nimport { AppComponent } from './app.component';\nimport { MockServerService } from './mockServer';\nimport { NetworkLoggerService } from './networkLogger.service';\nimport { QueriesListComponent } from './queriesList/queries-list.component';\nimport { RangerDetailComponent } from './ranger/ranger-detail.component';\nimport { RangerListComponent } from './ranger/ranger-list.component';\nimport { RangerListDataDirective } from './ranger/ranger-list.data.directive';\nimport { entitiesSelector, queriesSelector } from './selectors';\n\nexport function saveMockData(queryKey, actions): void {\n  return window.localStorage.setItem('mockApi-' + queryKey, JSON.stringify(actions));\n}\nexport function getMockData(queryKey): any[] {\n  return JSON.parse(window.localStorage.getItem('mockApi-' + queryKey));\n}\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\n    AppComponent,\n    QueriesListComponent,\n    RangerListComponent,\n    RangerDetailComponent,\n    RangerListDataDirective,\n  ],\n  imports: [\n    BrowserModule,\n    EffectsModule.forRoot([]),\n    HttpClientModule,\n    FormsModule,\n    StoreModule.forRoot({\n      entities1: entitiesReducer,\n      queries1: queriesReducer,\n    }),\n    NgrxQueryModule.forRoot({\n      entitiesSelector,\n      queriesSelector,\n      mock: {\n        mode: environment.mockMode,\n        saveMockData,\n        getMockData,\n      },\n    }),\n    StoreDevtoolsModule.instrument(),\n  ],\n  providers: [\n    MockServerService,\n    NetworkLoggerService,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: NetworkLoggerService,\n      multi: true,\n    },\n    {\n      provide: HTTP_INTERCEPTORS,\n      useExisting: MockServerService,\n      multi: true,\n    },\n  ],\n})\nexport class AppModule {\n  constructor(public appRef: ApplicationRef) {\n  }\n  // hmrOnInit(store: any): void {\n  //   console.log('HMR store', store);\n  // }\n  // hmrOnDestroy(store: any): void {\n  //   let cmpLocation = this.appRef.components.map(cmp => cmp.location.nativeElement);\n  //   // recreate elements\n  //   store.disposeOldHosts = createNewHosts(cmpLocation);\n  //   // remove styles\n  //   removeNgStyles();\n  // }\n  // hmrAfterDestroy(store: any): void {\n  //   // display new elements\n  //   store.disposeOldHosts();\n  //   delete store.disposeOldHosts;\n  // }\n}\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable ,  of } from 'rxjs';\n\nexport enum RequestMethod {\n  Get = 'GET',\n  Post = 'POST',\n  Put = 'PUT',\n  Delete = 'DELETE',\n}\n\nexport enum SERVER_STATE {\n  ON,\n  BUSY,\n  ERROR,\n  UNAUTHORIZED,\n}\n\nexport interface Ranger {\n  id?: number;\n  name?: string;\n  color?: string;\n}\n\nexport const defaultRangers: Ranger[] = [\n  {\n    id: 0,\n    name: 'Jason',\n    color: 'red',\n  },\n  {\n    id: 1,\n    name: 'Zack',\n    color: 'black',\n  },\n  {\n    id: 2,\n    name: 'Trini',\n    color: 'yellow',\n  },\n  {\n    id: 3,\n    name: 'Kimberly',\n    color: 'pink',\n  },\n  {\n    id: 4,\n    name: 'Billy',\n    color: 'blue',\n  },\n];\n\n@Injectable()\nexport class MockServerService implements HttpInterceptor {\n  rangers: Ranger[] = defaultRangers;\n  state: SERVER_STATE = SERVER_STATE.ON;\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const { body, method, url } = req;\n    const path = url.split('/').filter(segment => segment && segment.length > 0);\n    const id = +path[path.length - 1];\n\n    if (this.state === SERVER_STATE.BUSY) {\n      return of(new HttpResponse({\n        status: 429,\n        body: { error: 'Too many requests'},\n      }));\n    } else if (this.state === SERVER_STATE.UNAUTHORIZED) {\n      return of(new HttpResponse({\n        status: 401,\n        body: { error: 'Unauthorized'},\n      }));\n    } else if (this.state === SERVER_STATE.ERROR) {\n      return of(new HttpResponse({\n        status: 500,\n        body: { error: 'Internal server error'},\n      }));\n    }\n    switch (method) {\n      case RequestMethod.Get:\n        if (Number.isInteger(id)) {\n          return of(new HttpResponse({\n            body: this.rangers.find(ranger => ranger.id === id),\n            status: 200,\n          }));\n        } else {\n          return of(new HttpResponse({\n            body: this.rangers.map(ranger => ({ id: ranger.id, name: ranger.name })),\n            status: 200,\n          }));\n        }\n      case RequestMethod.Post:\n        body.id = this.rangers.length;\n        this.rangers.push(body);\n        return of(new HttpResponse({\n          body,\n          status: 200,\n        }));\n      case RequestMethod.Put:\n        if (Number.isInteger(id)) {\n          console.log(this.rangers);\n          const index = this.rangers.findIndex(ranger => ranger && ranger.id === id);\n          if (index >= 0) {\n            this.rangers[index] = Object.assign({}, this.rangers[index], body);\n            return of(new HttpResponse({\n              body,\n              status: 200,\n            }));\n          } else {\n            return of(new HttpResponse({\n              status: 404,\n              body: 'Invalid ID',\n            }));\n          }\n        }\n        return this.handleUnknown();\n      case RequestMethod.Delete:\n        if (Number.isInteger(id)) {\n          const index = this.rangers.findIndex(ranger => ranger.id === id);\n          if (index >= 0) {\n            this.rangers = this.rangers.slice(0, index).concat(this.rangers.slice(index + 1));\n            return of(new HttpResponse({\n              body: { message: 'Successfully deleted id ' + id },\n              status: 200,\n            }));\n          } else {\n            return of(new HttpResponse({\n              status: 404,\n              body: 'Invalid ID',\n            }));\n          }\n        }\n        return this.handleUnknown();\n      default:\n        return this.handleUnknown();\n    }\n  }\n\n  handleUnknown(): Observable<HttpResponse<string>> {\n    return of(new HttpResponse({\n      status: 404,\n      body: 'Unknown api endpoint',\n    }));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpEvent, HttpEventType, HttpHandler, HttpInterceptor, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap, filter } from 'rxjs/operators';\n\n@Injectable()\nexport class NetworkLoggerService implements HttpInterceptor {\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    console.log(`${req.method.toUpperCase()} ${req.url} ${req.body}`);\n    return next.handle(req).pipe(\n      filter(event => event.type === HttpEventType.Response),\n      tap((response: HttpResponse<any>) => console.log(response.status || 200, response.body)),\n    );\n  }\n}\n","module.exports = \"Queries\\n<dl *ngIf=\\\"queriesList$ | async as queriesList\\\">\\n  <ng-container *ngFor=\\\"let key of getKeys(queriesList)\\\">\\n    <dt>{{key}}</dt>\\n    <dd [id]=\\\"key\\\">{{queriesList[key] | json}}</dd>\\n  </ng-container>\\n</dl>\\n\"","import { queriesSelector } from '../selectors';\nimport { ConnectService } from 'ngrx-query';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'nq-queries-list',\n  templateUrl: 'queries-list.component.html'\n})\nexport class QueriesListComponent {\n  queriesList$: Observable<any>\n\n  constructor(private connectService: ConnectService) {\n    this.queriesList$ = connectService.select(queriesSelector);\n  }\n\n  getKeys(object: any): string[] {\n    return Object.keys(object);\n  }\n}\n","import { RequestParams } from 'ngrx-query';\nimport { arrayToObjectsById, objectsByIdToArray } from 'ngrx-query';\nimport { Ranger } from '../mockServer';\nimport { MutateParams } from 'ngrx-query';\n\nexport function createGetRangerQuery(id): RequestParams {\n  return {\n      transform: response => ({ rangersById: { [id]: response } }),\n      update: {\n        rangersById: (prevEntities, entities) => ({\n          ...prevEntities,\n          ...entities,\n        }),\n      },\n      url: `/api/rangers/${id}`,\n  };\n};\n\nexport function createGetRangerListQuery(): RequestParams {\n  return {\n    transform: response => ({\n      rangersById: arrayToObjectsById(response, ranger => ranger.id),\n    }),\n    update: {\n      rangersById: (prevRangers, rangers) => ({\n        ...prevRangers,\n        ...rangers,\n      }),\n    },\n    url: `/api/rangers`,\n  };\n}\n\nexport function createCreateRangerQuery(ranger): MutateParams {\n  return {\n    body: ranger,\n    optimisticUpdate: {\n      rangersById: (prevEntities) => ({\n        ...prevEntities,\n        [ranger.id]: ranger,\n      }),\n    },\n    transform: response => ({ rangersById: { [response.id]: response } }),\n    update: {\n      rangersById: (prevEntities, entities) => ({\n        ...prevEntities,\n        ...entities,\n      }),\n    },\n    url: `/api/rangers`,\n  };\n}\nexport function createUpdateRangerQuery(ranger): MutateParams {\n  return {\n    body: ranger,\n    optimisticUpdate: {\n      rangersById: (prevEntities) => ({\n        ...prevEntities,\n        [ranger.id]: ranger,\n      }),\n    },\n    options: {\n      method: 'PUT',\n    },\n    transform: response => ({ rangersById: { [response.id]: response } }),\n    update: {\n      rangersById: (prevEntities, entities) => ({\n        ...prevEntities,\n        ...entities,\n      }),\n    },\n    url: `/api/rangers/${ranger.id}`,\n  };\n}\nexport function createDeleteRangerQuery(id): MutateParams {\n  return {\n    optimisticUpdate: {\n      rangersById: prevEntities => {\n        const { [id]: deleted, ...rest} = prevEntities;\n        return rest;\n      },\n    },\n    options: {\n      method: 'DELETE',\n    },\n    update: {\n      rangersById: prevEntities => {\n        const { [id]: deleted, ...rest} = prevEntities;\n        return rest;\n      },\n    },\n    url: `/api/rangers/${id}`,\n  };\n}\n\nexport function rangerByIdSelector(rangerId): (any) => Ranger {\n  return state => {\n    if (rangerListSelector(state)) {\n        return rangerListSelector(state)[rangerId];\n    } else {\n        return undefined;\n    }\n  };\n}\nexport function rangerListSelector(s): Ranger[] {\n  return objectsByIdToArray(s.entities1.rangersById);\n}\n","module.exports = \"<strong>Favorite Color:</strong> {{nqData?.color}}\\n<button [id]=\\\"'detailRefresh' + nqData?.id\\\" (click)=\\\"nqRefresh.emit({})\\\">Refresh</button>\\n\"","import { NqConnectedComponent, provideNqConnectedComponent } from 'ngrx-query';\nimport { Ranger } from '../mockServer';\nimport { Component, EventEmitter, Input, Output, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [provideNqConnectedComponent(RangerDetailComponent)],\n  selector: 'nq-ranger-detail',\n  templateUrl: 'ranger-detail.component.html'\n})\nexport class RangerDetailComponent implements NqConnectedComponent {\n  @Input() nqData = <Ranger>undefined;\n  @Output() nqRefresh: EventEmitter<any> = new EventEmitter();\n\n  constructor(public changeDetector: ChangeDetectorRef) {}\n}\n","module.exports = \"<button id=\\\"listRefresh\\\" (click)=\\\"nqRefresh.emit({})\\\">Refresh</button>\\n<table>\\n  <tr>\\n    <th>Name</th>\\n    <th>Actions</th>\\n  </tr>\\n  <tbody *ngFor=\\\"let ranger of nqData\\\">\\n    <tr>\\n      <td>{{ranger.name}}</td>\\n      <td>\\n        <button (click)=\\\"showRangers[ranger.id] = !showRangers[ranger.id]\\\">{{ showRangers[ranger.id] ? 'Hide' : 'Show' }} Details</button>\\n        <button (click)=\\\"edit(ranger)\\\">Edit</button>\\n        <button (click)=\\\"delete(ranger.id)\\\">Delete</button>\\n      </td>\\n    </tr>\\n    <tr *ngIf=\\\"showRangers[ranger.id]\\\">\\n      <td colspan=\\\"2\\\">\\n        <nq-ranger-detail [nqConnect]=\\\"getDetailsQuery(ranger.id)\\\"></nq-ranger-detail>\\n      </td>\\n    </tr>\\n  </tbody>\\n</table>\\n\\n<h3>Add person</h3>\\n<label for=\\\"name\\\">Name</label><br>\\n<input type=\\\"text\\\" id=\\\"name\\\" [(ngModel)]=\\\"newRanger.name\\\" placeholder=\\\"i.e. Tommy\\\"><br>\\n<label for=\\\"color\\\">Color</label><br>\\n<input type=\\\"text\\\" id=\\\"color\\\" [(ngModel)]=\\\"newRanger.color\\\" placeholder=\\\"i.e. green\\\"><br>\\n<button id=\\\"add\\\" (click)=\\\"create(newRanger)\\\">Add</button>\\n\"","import { ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { Ranger } from '../mockServer';\nimport { Observable } from 'rxjs';\nimport {\n  createCreateRangerQuery,\n  createDeleteRangerQuery,\n  createGetRangerQuery,\n  createUpdateRangerQuery,\n  rangerByIdSelector\n} from './queries';\nimport { ConnectService, ConnectRequestParams, NqConnectedComponent, provideNqConnectedComponent } from 'ngrx-query';\nimport { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [provideNqConnectedComponent(RangerListComponent)],\n  selector: 'nq-ranger-list',\n  templateUrl: 'ranger-list.component.html'\n})\nexport class RangerListComponent implements NqConnectedComponent {\n  @Input() nqData: Ranger[];\n  @Output() nqRefresh: EventEmitter<any> = new EventEmitter();\n\n  showRangers: { [id: number]: boolean} = {};\n  newRanger: Ranger = {};\n\n  constructor(private connectService: ConnectService, public changeDetector: ChangeDetectorRef) {}\n\n  getDetailsQuery(id: number): ConnectRequestParams {\n    return Object.assign({}, createGetRangerQuery(id), { selector: rangerByIdSelector(id) });\n  }\n\n  edit(ranger: Ranger) {\n    const updatedRanger = Object.assign({}, ranger, { name: ranger.name + ' Edited' });\n    const mutateQuery = Object.assign({}, createUpdateRangerQuery(updatedRanger), { selector: rangerByIdSelector(ranger.id) });\n    this.connectService.mutateAsync(mutateQuery);\n  }\n\n  create(ranger: Ranger) {\n    const mutateQuery = Object.assign({}, createCreateRangerQuery(ranger));\n    this.connectService.mutateAsync(mutateQuery);\n    this.newRanger = {};\n  }\n\n  delete(id: number) {\n    const mutateQuery = Object.assign({}, createDeleteRangerQuery(id));\n    this.connectService.mutateAsync(mutateQuery);\n  }\n}\n","import { ChangeDetectorRef } from '@angular/core';\nimport { ConnectRequestDirective, NqConnectedComponent } from 'ngrx-query';\nimport { ConnectService } from 'ngrx-query';\nimport { Directive, Optional } from '@angular/core';\nimport { createGetRangerListQuery, rangerListSelector } from './queries';\n\n@Directive({ selector: '[rangerListData]' })\nexport class RangerListDataDirective extends ConnectRequestDirective {\n  constructor(private connect: ConnectService, public changeDetector: ChangeDetectorRef, @Optional() public host: NqConnectedComponent) {\n    super(connect, changeDetector, host);\n    this.config = Object.assign({}, createGetRangerListQuery(), { selector: rangerListSelector });\n  }\n}\n","export function entitiesSelector(state): any {\n  return state.entities1;\n}\nexport function queriesSelector(state): any {\n  return state.queries1;\n}\n","import { MockMode } from 'ngrx-query';\n// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false,\n  mockMode: MockMode.None,\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './demo/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n"],"sourceRoot":""}