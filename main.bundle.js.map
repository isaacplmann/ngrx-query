{"version":3,"sources":["webpack:///./src async","webpack:///./src/main.ts","webpack:///./src/demo/app.component.ts","webpack:///./src/demo/app.module.ts","webpack:///./src/demo/ranger/ranger-detail.component.ts","webpack:///./src/demo/ranger/ranger-list.component.ts","webpack:///./src/demo/ranger/ranger-list.data.directive.ts","webpack:///./src/environments/environment.ts","webpack:///./src/lib/helpers/getLatest.ts","webpack:///./src/lib/helpers/invariant.ts","webpack:///./src/lib/ngrx-query.ts","webpack:///./src/lib/services/connect.service.ts","webpack:///./src/demo/app.component.scss","webpack:///./src/demo/app.component.html","webpack:///./src/demo/ranger/ranger-detail.component.html","webpack:///./src/demo/ranger/ranger-list.component.html","webpack:///./src/lib/helpers/config.ts","webpack:///./src/lib/index.ts","webpack:///./src/lib/helpers/ngrxQueryConfig.ts","webpack:///./src/lib/services/connectEntity.service.ts","webpack:///./src/demo/mockServer.ts","webpack:///./src/demo/ranger/queries.ts","webpack:///./src/lib/directives/connect.directive.ts","webpack:///./src/lib/directives/connected.component.ts","webpack:///./src/lib/helpers/actionTypes.ts","webpack:///./src/lib/helpers/actions.ts","webpack:///./src/lib/services/effects.service.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 121;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src async\n// module id = 121\n// module chunks = 1","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './demo/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","import { createGetRangerListQuery, rangerListSelector } from './ranger/queries';\nimport { ConnectService } from './../lib/services/connect.service';\nimport { MockServerService, Ranger, SERVER_STATE } from './mockServer';\nimport { arrayToObjectsById, objectsByIdToArray } from '../lib/services/connectEntity.service';\nimport { ConnectRequestParams } from '../lib';\nimport { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'nq-demo',\n  styleUrls: ['./app.component.scss'],\n  templateUrl: './app.component.html',\n})\nexport class AppComponent {\n  serverState = SERVER_STATE;\n\n  constructor(private connectService: ConnectService, private mockServer: MockServerService) {}\n\n  log(message: any): void {\n    console.log(message);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/demo/app.component.ts","import { RangerListDataDirective } from './ranger/ranger-list.data.directive';\nimport { RangerDetailComponent } from './ranger/ranger-detail.component';\nimport { RangerListComponent } from './ranger/ranger-list.component';\nimport { entitiesReducer, NgrxQueryModule, queriesReducer } from '../lib';\nimport { AppComponent } from './app.component';\nimport { ApplicationRef, NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BaseRequestOptions, Http, HttpModule, Response, ResponseOptions, RequestMethod } from '@angular/http';\nimport { MockBackend, MockConnection } from '@angular/http/testing';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { MockServerService } from './mockServer';\n\nexport function httpFactory(backend, options): Http {\n  return new Http(backend, options);\n}\nexport function entitiesSelector(state): any {\n  return state.entities1;\n}\nexport function queriesSelector(state): any {\n  return state.queries1;\n}\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\n    AppComponent,\n    RangerListComponent,\n    RangerDetailComponent,\n    RangerListDataDirective,\n  ],\n  imports: [\n    BrowserModule,\n    HttpModule,\n    FormsModule,\n    StoreModule.provideStore({\n      entities1: entitiesReducer,\n      queries1: queriesReducer,\n    }),\n    NgrxQueryModule.forRoot({\n      entitiesSelector,\n      queriesSelector,\n    }),\n    StoreDevtoolsModule.instrumentOnlyWithExtension(),\n  ],\n  providers: [\n     BaseRequestOptions,\n     MockBackend,\n     {\n       deps: [MockBackend, BaseRequestOptions],\n       provide: Http,\n       useFactory: httpFactory,\n     },\n     MockServerService,\n  ],\n})\nexport class AppModule {\n  constructor(public appRef: ApplicationRef, public mockBackend: MockBackend, public mockServer: MockServerService) {\n    mockBackend.connections.subscribe((connection: MockConnection) => {\n      this.mockServer.handleConnection(connection);\n    });\n  }\n  // hmrOnInit(store: any): void {\n  //   console.log('HMR store', store);\n  // }\n  // hmrOnDestroy(store: any): void {\n  //   let cmpLocation = this.appRef.components.map(cmp => cmp.location.nativeElement);\n  //   // recreate elements\n  //   store.disposeOldHosts = createNewHosts(cmpLocation);\n  //   // remove styles\n  //   removeNgStyles();\n  // }\n  // hmrAfterDestroy(store: any): void {\n  //   // display new elements\n  //   store.disposeOldHosts();\n  //   delete store.disposeOldHosts;\n  // }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/demo/app.module.ts","import { NqConnectedComponent, provideNqConnectedComponent } from '../../lib';\nimport { Ranger } from '../mockServer';\nimport { Component, EventEmitter, Input, Output, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [provideNqConnectedComponent(RangerDetailComponent)],\n  selector: 'nq-ranger-detail',\n  templateUrl: 'ranger-detail.component.html'\n})\nexport class RangerDetailComponent implements NqConnectedComponent {\n  @Input() nqData = <Ranger>undefined;\n  @Output() nqRefresh: EventEmitter<any> = new EventEmitter();\n\n  constructor(public changeDetector: ChangeDetectorRef) {}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/demo/ranger/ranger-detail.component.ts","import { ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { Ranger } from '../mockServer';\nimport { Observable } from 'rxjs/Observable';\nimport {\n  createCreateRangerQuery,\n  createDeleteRangerQuery,\n  createGetRangerQuery,\n  createUpdateRangerQuery,\n  rangerByIdSelector\n} from './queries';\nimport { ConnectService, ConnectRequestParams, NqConnectedComponent, provideNqConnectedComponent } from '../../lib';\nimport { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [provideNqConnectedComponent(RangerListComponent)],\n  selector: 'nq-ranger-list',\n  templateUrl: 'ranger-list.component.html'\n})\nexport class RangerListComponent implements NqConnectedComponent {\n  @Input() nqData: Ranger[];\n  @Output() nqRefresh: EventEmitter<any> = new EventEmitter();\n\n  showRangers: { [id: number]: boolean} = {};\n  newRanger: Ranger = {};\n\n  constructor(private connectService: ConnectService, public changeDetector: ChangeDetectorRef) {}\n\n  getDetailsQuery(id: number): ConnectRequestParams {\n    return Object.assign({}, createGetRangerQuery(id), { selector: rangerByIdSelector(id) });\n  }\n\n  edit(ranger: Ranger) {\n    const updatedRanger = Object.assign({}, ranger, { name: ranger.name + ' Edited' });\n    const mutateQuery = Object.assign({}, createUpdateRangerQuery(updatedRanger), { selector: rangerByIdSelector(ranger.id) });\n    this.connectService.mutateAsync(mutateQuery);\n  }\n\n  create(ranger: Ranger) {\n    const mutateQuery = Object.assign({}, createCreateRangerQuery(ranger));\n    this.connectService.mutateAsync(mutateQuery);\n    this.newRanger = {};\n  }\n\n  delete(id: number) {\n    const mutateQuery = Object.assign({}, createDeleteRangerQuery(id));\n    this.connectService.mutateAsync(mutateQuery);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/demo/ranger/ranger-list.component.ts","import { ChangeDetectorRef } from '@angular/core';\nimport { ConnectRequestDirective, NqConnectedComponent } from './../../lib';\nimport { ConnectService } from './../../lib/services/connect.service';\nimport { Directive, Optional } from '@angular/core';\nimport { createGetRangerListQuery, rangerListSelector } from './queries';\n\n@Directive({ selector: '[rangerListData]' })\nexport class RangerListDataDirective extends ConnectRequestDirective {\n  constructor(private connect: ConnectService, public changeDetector: ChangeDetectorRef, @Optional() public host: NqConnectedComponent) {\n    super(connect, changeDetector, host);\n    this.config = Object.assign({}, createGetRangerListQuery(), { selector: rangerListSelector });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/demo/ranger/ranger-list.data.directive.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts","import { Observable } from 'rxjs/Observable';\n\nexport function getLatest<T>(o$: Observable<T>): T {\n  let result: T;\n  o$.take(1).subscribe(x => result = x);\n  return result;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/helpers/getLatest.ts","export function invariant(condition: boolean, message: string, context?: any): void {\n  if (!condition) {\n    let errorMessage = message;\n\n    if (context) {\n      errorMessage = (message.indexOf('%s') !== -1) ?\n        message.replace('%s', context) :\n        errorMessage = `${message}: ${context}`;\n    }\n\n    throw new Error(errorMessage);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/helpers/invariant.ts","import { ConnectEntityService } from './services/connectEntity.service';\nimport { NgrxQueryConfig } from './helpers/ngrxQueryConfig';\nimport { ConnectRequestDirective } from './directives/connect.directive';\nimport { NGRX_QUERY_CONFIG } from './helpers/config';\nimport { ConnectService } from './services/connect.service';\nimport { NgrxQueryEffects } from './services/effects.service';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\n\n@NgModule({\n  declarations: [\n    ConnectRequestDirective,\n  ],\n  exports: [\n    ConnectRequestDirective,\n  ],\n  imports: [\n    EffectsModule.run(NgrxQueryEffects),\n  ],\n})\nexport class NgrxQueryModule {\n\n  /* optional: in case you need users to override your providers */\n  static forRoot(config?: NgrxQueryConfig): ModuleWithProviders {\n    return {\n      ngModule: NgrxQueryModule,\n      providers: [\n        { provide: NGRX_QUERY_CONFIG, useValue: config },\n        ConnectService,\n        ConnectEntityService,\n      ],\n    };\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/ngrx-query.ts","import { NgrxQueryConfig, Selector } from '../helpers/ngrxQueryConfig';\nimport { mutateAsync, MutateParams, requestAsync, RequestParams } from '../helpers/actions';\nimport { defaultEntitiesSelector, NGRX_QUERY_CONFIG } from '../helpers/config';\nimport { Inject, Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface ConnectRequestParams extends RequestParams {\n  selector?: Selector;\n}\nexport interface ConnectMutateParams extends MutateParams {\n  selector?: Selector;\n}\n\n@Injectable()\nexport class ConnectService {\n  constructor(private store: Store<any>, @Inject(NGRX_QUERY_CONFIG) private config: NgrxQueryConfig) { }\n\n  public mutateAsync(config: ConnectMutateParams): Observable<any> {\n    this.store.dispatch(mutateAsync(config));\n    return this.select(config.selector);\n  }\n\n  public requestAsync(config: ConnectRequestParams): Observable<any> {\n    this.store.dispatch(requestAsync(config));\n    return this.select(config.selector);\n  }\n\n  public select(selector: Selector): Observable<any> {\n    return this.store.select(selector || this.config && this.config.entitiesSelector || defaultEntitiesSelector);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/services/connect.service.ts","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"h1 {\\n  text-align: center;\\n  font-family: sans-serif; }\\n\\nmain {\\n  padding: 1em;\\n  font-family: Arial, Helvetica, sans-serif;\\n  display: block; }\\n\\nfooter {\\n  text-align: center;\\n  font-size: 0.8em;\\n  width: 100%;\\n  position: absolute;\\n  bottom: 20px; }\\n\\nfooter a {\\n  text-decoration: none;\\n  font-family: sans-serif; }\\n\\nfooter a:hover {\\n  text-decoration: underline; }\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/demo/app.component.scss\n// module id = 202\n// module chunks = 1","module.exports = \"<header>\\n  <h1 class=\\\"title\\\">Ngrx Query</h1>\\n</header>\\n<main>\\n  <h3>Server Status</h3>\\n  <label><input type=\\\"radio\\\" [(ngModel)]=\\\"mockServer.state\\\" name=\\\"serverState\\\" [value]=\\\"serverState.ON\\\">On</label><br>\\n  <label><input type=\\\"radio\\\" [(ngModel)]=\\\"mockServer.state\\\" name=\\\"serverState\\\" [value]=\\\"serverState.BUSY\\\">Busy</label><br>\\n  <label><input type=\\\"radio\\\" [(ngModel)]=\\\"mockServer.state\\\" name=\\\"serverState\\\" [value]=\\\"serverState.ERROR\\\">Error</label><br>\\n\\n  <p>Open the console to see the fake server calls (using MockBackend).</p>\\n\\n  <h3>Connected Element/Component</h3>\\n  <label for=\\\"isShown\\\">Show List?</label> <input id=\\\"isShown\\\" type=\\\"checkbox\\\" [(ngModel)]=\\\"isShown\\\">\\n  <nq-ranger-list *ngIf=\\\"isShown\\\" rangerListData></nq-ranger-list>\\n</main>\\n<footer>\\n  <a href=\\\"https://github.com/isaacplmann/ngrx-query\\\">Ngrx Query</a>\\n</footer>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/demo/app.component.html\n// module id = 210\n// module chunks = 1","module.exports = \"<strong>Favorite Color:</strong> {{nqData?.color}}\\n<button (click)=\\\"nqRefresh.emit({})\\\">Refresh</button>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/demo/ranger/ranger-detail.component.html\n// module id = 211\n// module chunks = 1","module.exports = \"<button (click)=\\\"nqRefresh.emit({})\\\">Refresh</button>\\n<table>\\n  <tr>\\n    <th>Name</th>\\n    <th>Actions</th>\\n  </tr>\\n  <tbody *ngFor=\\\"let ranger of nqData\\\">\\n    <tr>\\n      <td>{{ranger.name}}</td>\\n      <td>\\n        <button (click)=\\\"showRangers[ranger.id] = !showRangers[ranger.id]\\\">{{ showRangers[ranger.id] ? 'Hide' : 'Show' }} Details</button>\\n        <button (click)=\\\"edit(ranger)\\\">Edit</button>\\n        <button (click)=\\\"delete(ranger.id)\\\">Delete</button>\\n      </td>\\n    </tr>\\n    <tr *ngIf=\\\"showRangers[ranger.id]\\\">\\n      <td colspan=\\\"2\\\">\\n        <nq-ranger-detail [nqConnect]=\\\"getDetailsQuery(ranger.id)\\\"></nq-ranger-detail>\\n      </td>\\n    </tr>\\n  </tbody>\\n</table>\\n\\n<h3>Add person</h3>\\n<label for=\\\"name\\\">Name</label><br>\\n<input type=\\\"text\\\" id=\\\"name\\\" [(ngModel)]=\\\"newRanger.name\\\" placeholder=\\\"i.e. Tommy\\\"><br>\\n<label for=\\\"color\\\">Color</label><br>\\n<input type=\\\"text\\\" [(ngModel)]=\\\"newRanger.color\\\" placeholder=\\\"i.e. green\\\"><br>\\n<button (click)=\\\"create(newRanger)\\\">Add</button>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/demo/ranger/ranger-list.component.html\n// module id = 212\n// module chunks = 1","import { NgrxQueryConfig } from './ngrxQueryConfig';\nimport { OpaqueToken } from '@angular/core';\n\nexport const statusCodes = {\n  GATEWAY_TIMEOUT: 504,\n  REQUEST_TIMEOUT: 408, // client took too long\n  SERVICE_UNAVAILABLE: 503,\n  TOO_MANY_REQUESTS: 429,\n  UNKNOWN: 0,\n};\n\nexport const NGRX_QUERY_CONFIG = new OpaqueToken('NGRX_QUERY_CONFIG');\n\nexport const defaultEntitiesSelector = state => state.entities;\nexport const defaultQueriesSelector = state => state.queries;\nexport const defaultBackoffConfig = {\n  maxAttempts: 5,\n  maxDuration: 5000,\n  minDuration: 300,\n};\nexport const defaultRetryableStatusCodes = [\n  statusCodes.UNKNOWN, // normally means a failed connection\n  statusCodes.REQUEST_TIMEOUT,\n  statusCodes.TOO_MANY_REQUESTS, // hopefully backoff stops this getting worse\n  statusCodes.SERVICE_UNAVAILABLE,\n  statusCodes.GATEWAY_TIMEOUT,\n];\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/helpers/config.ts","import 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/do';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/operator/retryWhen';\nimport 'rxjs/add/observable/range';\nimport 'rxjs/add/observable/timer';\nimport 'rxjs/add/operator/mergeMap';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/take';\nimport 'rxjs/add/operator/zip';\nimport 'rxjs/add/observable/throw';\n\nexport { NgrxQueryModule } from './ngrx-query';\nexport { NgrxQueryEffects } from './services/effects.service';\nexport { default as entitiesReducer } from 'redux-query/dist/commonjs/reducers/entities';\nexport { default as queriesReducer } from 'redux-query/dist/commonjs/reducers/queries';\nexport * from 'redux-query/dist/commonjs/selectors/query';\nexport { ConnectService, ConnectRequestParams, ConnectMutateParams } from './services/connect.service';\nexport { ConnectEntityService } from './services/connectEntity.service';\nexport { ConnectRequestDirective } from './directives/connect.directive';\nexport { NqConnectedComponent, provideNqConnectedComponent } from './directives/connected.component';\nexport { NGRX_QUERY_CONFIG } from './helpers/config';\nexport { NgrxQueryConfig } from './helpers/ngrxQueryConfig';\nexport { RequestParams, MutateParams, requestAsync, mutateAsync } from './helpers/actions';\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/index.ts","export type Selector = (state: any) => any;\nexport interface BackoffConfig {\n  maxAttempts: number;\n  maxDuration: number;\n  minDuration: number;\n};\nexport interface NgrxQueryConfig {\n  queriesSelector?: Selector;\n  entitiesSelector?: Selector;\n  backoff?: BackoffConfig;\n  retryableStatusCodes?: number[];\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/helpers/ngrxQueryConfig.ts","import { withoutPath } from 'redux-query/dist/commonjs/reducers/entities';\nimport { ConnectService } from './connect.service';\nimport { NgrxQueryConfig, Selector } from '../helpers/ngrxQueryConfig';\nimport { mutateAsync, MutateParams, requestAsync, RequestParams } from '../helpers/actions';\nimport { defaultEntitiesSelector, NGRX_QUERY_CONFIG } from '../helpers/config';\nimport { Inject, Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs/Observable';\n\nexport function objectsByIdToArray(obj: object): any[] {\n  if (!obj) {\n    return [];\n  }\n  return Object.keys(obj).map(key => obj[key]);\n};\nexport function arrayToObjectsById(array: any[], keyOf: (any) => string) {\n  return array.reduce((objectsById, item) => {\n    objectsById[keyOf(item)] = item;\n    return objectsById;\n  }, {});\n}\n\nexport interface EntityConfig<E> {\n  idSelector: (item: E) => any;\n  entityTypeName: string;\n  endpoints: CrudEndpoints;\n}\n\nexport interface CrudEndpoints {\n  create: string;\n  remove: (id: number | string) => string;\n  getById: (id: number | string) => string;\n  list: string;\n  update: string;\n}\n\n@Injectable()\nexport class ConnectEntityService<E> {\n  config: EntityConfig<E>;\n  entity: E;\n\n  constructor(private connectService: ConnectService) { }\n\n  init(config: EntityConfig<E>) {\n    this.config = config;\n  }\n\n  list(): Observable<E[]> {\n    return this.connectService.requestAsync({\n      selector: s => objectsByIdToArray(s.entities[this.config.entityTypeName]),\n      transform: (response: E[]) => ({ [this.config.entityTypeName]: arrayToObjectsById(response, this.config.idSelector) }),\n      update: {\n        [this.config.entityTypeName]: (prevEntities, entities) => ({\n          ...prevEntities,\n          ...entities,\n        }),\n      },\n      url: this.config.endpoints.list,\n    });\n  }\n  get(id: number | string): Observable<E> {\n    return this.connectService.requestAsync({\n      selector: s => s.entities[this.config.entityTypeName] && s.entities[this.config.entityTypeName][id],\n      transform: (response: E) => ({ [this.config.entityTypeName]: { [id]: response } }),\n      update: {\n        [this.config.entityTypeName]: (prevEntities, entities) => ({\n          ...prevEntities,\n          ...entities,\n        }),\n      },\n      url: this.config.endpoints.getById(id),\n    });\n  }\n  create(entity: E): Observable<E> {\n    return this.connectService.mutateAsync({\n      body: entity,\n      optimisticUpdate: {\n        [this.config.entityTypeName]: (prevEntities) => ({\n          ...prevEntities,\n          [this.config.idSelector(entity)]: entity,\n        }),\n      },\n      transform: (response: E) => ({ [this.config.entityTypeName]: { [this.config.idSelector(response)]: response } }),\n      update: {\n        [this.config.entityTypeName]: (prevEntities, entities) => ({\n          ...prevEntities,\n          ...entities,\n        }),\n      },\n      url: this.config.endpoints.create,\n    });\n  }\n  edit(entity: E): Observable<E> {\n    return this.connectService.mutateAsync({\n      body: entity,\n      optimisticUpdate: {\n        [this.config.entityTypeName]: (prevEntities) => ({\n          ...prevEntities,\n          [this.config.idSelector(entity)]: entity,\n        }),\n      },\n      options: {\n        method: 'PUT',\n      },\n      selector: s => s.entities[this.config.entityTypeName][this.config.idSelector(entity)],\n      transform: (response: E) => ({ [this.config.entityTypeName]: { [this.config.idSelector(response)]: response } }),\n      update: {\n        [this.config.entityTypeName]: (prevEntities, entities) => ({\n          ...prevEntities,\n          ...entities,\n        }),\n      },\n      url: this.config.endpoints.update,\n    });\n  }\n  delete(id: number | string): Observable<E> {\n    return this.connectService.mutateAsync({\n      selector: s => s.entities[this.config.entityTypeName][id],\n      optimisticUpdate: {\n        [this.config.entityTypeName]: prevEntities => withoutPath(prevEntities, [id]),\n      },\n      options: {\n        method: 'DELETE',\n      },\n      update: {\n        [this.config.entityTypeName]: prevEntities => withoutPath(prevEntities, [id]),\n      },\n      url: this.config.endpoints.remove(id + ''),\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/services/connectEntity.service.ts","import { Injectable } from '@angular/core';\nimport { MockConnection } from '@angular/http/testing';\nimport { RequestMethod, Response, ResponseOptions, ReadyState } from \"@angular/http\";\n\nexport enum SERVER_STATE {\n  ON,\n  BUSY,\n  ERROR,\n}\n\nexport interface Ranger {\n  id?: number;\n  name?: string;\n  color?: string;\n}\n\nexport const defaultRangers: Ranger[] = [\n  {\n    id: 0,\n    name: 'Jason',\n    color: 'red',\n  },\n  {\n    id: 1,\n    name: 'Zack',\n    color: 'black',\n  },\n  {\n    id: 2,\n    name: 'Trini',\n    color: 'yellow',\n  },\n  {\n    id: 3,\n    name: 'Kimberly',\n    color: 'pink',\n  },\n  {\n    id: 4,\n    name: 'Billy',\n    color: 'blue',\n  },\n];\n\n@Injectable()\nexport class MockServerService {\n  rangers: Ranger[] = defaultRangers;\n  state: SERVER_STATE = SERVER_STATE.ON;\n\n  handleConnection(connection: MockConnection) {\n    const method = connection.request.method;\n    const url = connection.request.url;\n    const body = JSON.parse(connection.request.getBody());\n    console.log(`${RequestMethod[method].toUpperCase()} ${url}`, body);\n    connection.response.asObservable().take(1).subscribe(response => console.log(`${response.status || 200}`, response.json()));\n    const path = url.split('/').filter(segment => segment && segment.length > 0);\n    const id = +path[path.length - 1];\n\n    if (this.state === SERVER_STATE.BUSY) {\n      connection.mockRespond(new Response(new ResponseOptions({\n        status: 429,\n        body: { error: 'Too many requests'},\n      })));\n      return;\n    } else if (this.state === SERVER_STATE.ERROR) {\n      connection.mockRespond(new Response(new ResponseOptions({\n        status: 500,\n        body: { error: 'Internal server error'},\n      })));\n      return;\n    }\n    switch (method) {\n      case RequestMethod.Get:\n        if (Number.isInteger(id)) {\n          connection.mockRespond(new Response(new ResponseOptions({\n            body: JSON.stringify(this.rangers.find(ranger => ranger.id === id)),\n            status: 200,\n          })));\n        } else {\n          connection.mockRespond(new Response(new ResponseOptions({\n            body: JSON.stringify(this.rangers.map(ranger => ({ id: ranger.id, name: ranger.name }))),\n            status: 200,\n          })));\n        }\n        break;\n      case RequestMethod.Post:\n        body.id = this.rangers.length;\n        this.rangers.push(body);\n        connection.mockRespond(new Response(new ResponseOptions({\n          body: JSON.stringify(body),\n          status: 200,\n        })));\n        break;\n      case RequestMethod.Put:\n        if (Number.isInteger(id)) {\n          console.log(this.rangers);\n          const index = this.rangers.findIndex(ranger => ranger && ranger.id === id);\n          if (index >= 0) {\n            this.rangers[index] = Object.assign({}, this.rangers[index], body);\n            connection.mockRespond(new Response(new ResponseOptions({\n              body: JSON.stringify(body),\n              status: 200,\n            })));\n          } else {\n            connection.mockRespond(new Response(new ResponseOptions({\n              status: 404,\n              body: 'Invalid ID',\n            })));\n          }\n        } else {\n          this.handleUnknown(connection);\n        }\n        break;\n      case RequestMethod.Delete:\n        if (Number.isInteger(id)) {\n          const index = this.rangers.findIndex(ranger => ranger.id === id);\n          if (index >= 0) {\n            this.rangers = this.rangers.slice(0, index).concat(this.rangers.slice(index + 1));\n            connection.mockRespond(new Response(new ResponseOptions({\n              body: { message: 'Successfully deleted id ' + id },\n              status: 200,\n            })));\n          } else {\n            connection.mockRespond(new Response(new ResponseOptions({\n              status: 404,\n              body: 'Invalid ID',\n            })));\n          }\n        } else {\n          this.handleUnknown(connection);\n        }\n        break;\n      default:\n        this.handleUnknown(connection);\n    }\n  }\n\n  handleUnknown(connection: MockConnection) {\n    connection.mockRespond(new Response(new ResponseOptions({\n      status: 404,\n      body: 'Unknown api endpoint',\n    })));\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/demo/mockServer.ts","import { Ranger } from '../mockServer';\nimport { MutateParams } from './../../lib/helpers/actions';\nimport * as url from 'url';\nimport { arrayToObjectsById, objectsByIdToArray } from '../../lib/services/connectEntity.service';\nimport { state } from '@angular/core';\nimport { mutateAsync, RequestParams } from '../../lib';\n\nexport function createGetRangerQuery(id): RequestParams {\n  return {\n      transform: response => ({ rangersById: { [id]: response } }),\n      update: {\n        rangersById: (prevEntities, entities) => ({\n          ...prevEntities,\n          ...entities,\n        }),\n      },\n      url: `/api/rangers/${id}`,\n  };\n};\n\nexport function createGetRangerListQuery(): RequestParams {\n  return {\n    transform: response => ({\n      rangersById: arrayToObjectsById(response, ranger => ranger.id),\n    }),\n    update: {\n      rangersById: (prevRangers, rangers) => ({\n        ...prevRangers,\n        ...rangers,\n      }),\n    },\n    url: `/api/rangers`,\n  };\n}\n\nexport function createCreateRangerQuery(ranger): MutateParams {\n  return {\n    body: ranger,\n    optimisticUpdate: {\n      rangersById: (prevEntities) => ({\n        ...prevEntities,\n        [ranger.id]: ranger,\n      }),\n    },\n    transform: response => ({ rangersById: { [response.id]: response } }),\n    update: {\n      rangersById: (prevEntities, entities) => ({\n        ...prevEntities,\n        ...entities,\n      }),\n    },\n    url: `/api/rangers`,\n  };\n}\nexport function createUpdateRangerQuery(ranger): MutateParams {\n  return {\n    body: ranger,\n    optimisticUpdate: {\n      rangersById: (prevEntities) => ({\n        ...prevEntities,\n        [ranger.id]: ranger,\n      }),\n    },\n    options: {\n      method: 'PUT',\n    },\n    transform: response => ({ rangersById: { [response.id]: response } }),\n    update: {\n      rangersById: (prevEntities, entities) => ({\n        ...prevEntities,\n        ...entities,\n      }),\n    },\n    url: `/api/rangers/${ranger.id}`,\n  };\n}\nexport function createDeleteRangerQuery(id): MutateParams {\n  return {\n    optimisticUpdate: {\n      rangersById: prevEntities => {\n        const { [id]: deleted, ...rest} = prevEntities;\n        return rest;\n      },\n    },\n    options: {\n      method: 'DELETE',\n    },\n    update: {\n      rangersById: prevEntities => {\n        const { [id]: deleted, ...rest} = prevEntities;\n        return rest;\n      },\n    },\n    url: `/api/rangers/${id}`,\n  };\n}\n\nexport function rangerByIdSelector(rangerId): Ranger {\n  return state => {\n    if (rangerListSelector(state)) {\n        return rangerListSelector(state)[rangerId];\n    } else {\n        return undefined;\n    }\n  };\n}\nexport function rangerListSelector(s): Ranger[] {\n  return objectsByIdToArray(s.entities1.rangersById);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/demo/ranger/queries.ts","import { ChangeDetectorRef } from '@angular/core';\nimport { Optional } from '@angular/core';\nimport { HostBinding } from '@angular/core';\nimport { ConnectRequestParams, ConnectService } from '../services/connect.service';\nimport { Directive, EventEmitter, Input, OnDestroy, OnInit, Output, Host, Type } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { NqConnectedComponent } from './connected.component';\n\n@Directive({\n  exportAs: 'nqConnect',\n  selector: '[nqConnect]',\n})\nexport class ConnectRequestDirective implements OnInit, OnDestroy {\n  // tslint:disable-next-line:no-input-rename\n  @Input('nqConnect')\n  config: any = <ConnectRequestParams>undefined;\n  @Output() response: EventEmitter<any> = new EventEmitter();\n\n  subscription: Subscription;\n\n  constructor(\n    private connectService: ConnectService,\n    public changeDetector: ChangeDetectorRef,\n    @Optional() public host: NqConnectedComponent,\n  ) {}\n\n  ngOnInit(): void {\n    this.subscribe(this.config);\n    if (this.host) {\n      this.host.nqRefresh.subscribe(() => this.forceRequest());\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribe();\n  }\n\n  subscribe(config: ConnectRequestParams): void {\n    this.unsubscribe();\n    this.subscription = this.connectService.requestAsync(config).subscribe(response => {\n      if (this.response) {\n        if (this.host) {\n          setTimeout(() => {\n            this.host.nqData = response;\n            if (this.host.changeDetector) {\n              this.host.changeDetector.detectChanges();\n            }\n          });\n        }\n        this.response.emit(response);\n      }\n    });\n  }\n\n  unsubscribe(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  forceRequest(): void {\n    this.subscribe(Object.assign({}, this.config, { force: true }));\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/directives/connect.directive.ts","import { EventEmitter, forwardRef, Provider, ChangeDetectorRef } from '@angular/core';\n\nexport abstract class NqConnectedComponent {\n  changeDetector?: ChangeDetectorRef;\n  nqData: any;\n  nqRefresh: EventEmitter<any>;\n}\n\nexport function provideNqConnectedComponent(component: any, parentType?: any): Provider {\n  return { provide: parentType || NqConnectedComponent, useExisting: forwardRef(() => component) };\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/directives/connected.component.ts","export const REQUEST_ASYNC = '[ngrx-query] REQUEST_ASYNC';\nexport const MUTATE_ASYNC = '[ngrx-query] MUTATE_ASYNC';\nexport const CANCEL_QUERY = '[ngrx-query] CANCEL_QUERY';\nexport const RESET = '[ngrx-query] RESET';\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/helpers/actionTypes.ts","import * as ngrxQueryActionTypes from './actionTypes';\nimport * as actions from 'redux-query/dist/commonjs/actions';\n\nexport type TransformFunction = (response: any) => { [id: string]: any};\nexport type UpdateFunction = (prevValue: any, value: any) => any;\nexport interface UpdateFunctionMap {\n  [id: string]: UpdateFunction;\n}\nexport interface HttpOptions {\n  method?: 'DELETE' | 'GET' | 'HEAD' | 'POST' | 'PUT';\n  headers?: { [key: string]: any };\n  credentials?: 'include';\n}\n\nexport interface BaseParams {\n    body?: Object;\n    url: string;\n    queryKey?: string;\n}\nexport interface RequestParams extends BaseParams {\n    force?: boolean;\n    meta?: Object;\n    options?: HttpOptions;\n    retry?: boolean;\n    transform?: TransformFunction;\n    update: UpdateFunctionMap;\n};\n\nexport interface MutateParams extends BaseParams {\n    options?: HttpOptions;\n    optimisticUpdate?: UpdateFunctionMap;\n    transform?: TransformFunction;\n    update: UpdateFunctionMap;\n};\n\nexport const requestAsync = (params: RequestParams) => Object.assign({}, actions.requestAsync(params), { type: ngrxQueryActionTypes.REQUEST_ASYNC });\nexport const mutateAsync = (params: MutateParams) => Object.assign({}, actions.mutateAsync(params), { type: ngrxQueryActionTypes.MUTATE_ASYNC });\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/helpers/actions.ts","import { Response, ResponseOptions } from '@angular/http';\nimport { NgrxQueryConfig } from '../helpers/ngrxQueryConfig';\nimport { defaultEntitiesSelector, defaultQueriesSelector, defaultBackoffConfig, defaultRetryableStatusCodes } from './../helpers/config';\nimport { invariant } from '../helpers/invariant';\nimport * as ngrxQueryActionTypes from '../helpers/actionTypes';\nimport { NGRX_QUERY_CONFIG } from '../helpers/config';\nimport { getLatest } from '../helpers/getLatest';\nimport { Inject, Injectable } from '@angular/core';\nimport { Http, Request } from '@angular/http';\nimport { Actions, Effect } from '@ngrx/effects';\nimport { Action, Store } from '@ngrx/store';\nimport * as actions from 'redux-query/dist/commonjs/actions';\nimport * as actionTypes from 'redux-query/dist/commonjs/constants/action-types';\nimport * as httpMethods from 'redux-query/dist/commonjs/constants/http-methods';\nimport { reconcileQueryKey } from 'redux-query/dist/commonjs/lib/query-key';\nimport { Observable } from 'rxjs/Observable';\n\nexport function identity(x: any, y?: any): any {\n  return x;\n}\n\nexport function optimisticUpdateEntities(optimisticUpdate, entities) {\n  return Object.keys(optimisticUpdate).reduce(\n    (accum, key) => {\n      if (optimisticUpdate[key]) {\n        accum[key] = optimisticUpdate[key](entities[key]);\n      } else {\n        accum[key] = entities[key];\n      }\n\n      return accum;\n    },\n    {});\n};\n\nexport function updateEntities(update, entities, transformed) {\n  // If update not supplied, then no change to entities should be made\n  return Object.keys(update || {}).reduce(\n    (accum, key) => {\n      accum[key] = update[key]((entities || {})[key], (transformed || {})[key]);\n\n      return accum;\n    },\n    {});\n};\n\nexport function getPendingQueries(queries: any[]) {\n  return queries.filter((query) => query.isPending);\n};\n\n@Injectable()\nexport class NgrxQueryEffects {\n  @Effect() public requestAsync: Observable<Action> = this.actions$\n    .ofType(ngrxQueryActionTypes.REQUEST_ASYNC)\n    .map((action: any) => {\n      const {\n        url,\n        force,\n        retry,\n        update,\n      } = action;\n\n      invariant(!!url, 'Missing required `url` field in action handler');\n      invariant(!!update, 'Missing required `update` field in action handler');\n\n      const queryKey = reconcileQueryKey(action);\n\n      const state = getLatest(this.store);\n      const queries = this.config && this.config.queriesSelector && this.config.queriesSelector(state)\n        || defaultQueriesSelector(state);\n\n      const queriesState = queries[queryKey];\n      const { isPending, status } = queriesState || <any>{};\n      const hasSucceeded = status >= 200 && status < 300;\n      const attemptRequest = force || !queriesState || (retry !== false && !isPending && !hasSucceeded);\n      return { attemptRequest, action };\n    })\n    .filter(({ attemptRequest }) => attemptRequest)\n    .mergeMap(({ action }) => {\n      const {\n        url,\n        body,\n        transform = identity,\n        update,\n        options = <any>{},\n        meta,\n      } = action;\n      const queryKey = reconcileQueryKey(action);\n\n      const start = new Date();\n      const { method = httpMethods.GET } = options;\n\n      const request = {\n        url,\n        method,\n        body,\n        headers: options.headers,\n        withCredentials: options.credentials === 'include',\n      };\n\n      return Observable.of({})\n        .mergeMap(() => {\n          this.store.dispatch(actions.requestStart(url, body, request, meta, queryKey));\n          return this.http.request(url, request)\n            .map(response => {\n              if (!response.ok) {\n                throw response;\n              }\n              return response;\n            });\n        })\n        .map(response => {\n          const callbackState = getLatest(this.store);\n          const entities = this.config && this.config.entitiesSelector && this.config.entitiesSelector(callbackState)\n            || defaultEntitiesSelector(callbackState);\n          const transformed = transform(response.json(), response.text());\n          const newEntities = updateEntities(update, entities, transformed);\n          this.store.dispatch(actions.requestSuccess(url, body, response.status, newEntities, meta, queryKey));\n          const end = new Date();\n          const duration = end.valueOf() - start.valueOf();\n          return {\n            body: response.json(),\n            duration,\n            entities: newEntities,\n            status: response.status,\n            text: response.text,\n            transformed,\n            type: actionTypes.REQUEST_ASYNC,\n          };\n        })\n        .retryWhen(attempts => {\n          const backoff = this.config && this.config.backoff || defaultBackoffConfig;\n          const retryableStatusCodes = this.config && this.config.retryableStatusCodes || defaultRetryableStatusCodes;\n          return Observable.range(1, backoff.maxAttempts + 1)\n            .zip(attempts, (i, response) => ({ response, i }))\n            .flatMap(({ response, i }) => {\n              if (i < backoff.maxAttempts && retryableStatusCodes.indexOf(response.status) >= 0) {\n                // Delay retry by min duration the first attempt, up to max duration on the (maxAttempts)th attempt\n                return Observable.timer(\n                  backoff.minDuration +\n                  (i - 1) * (backoff.maxDuration - backoff.minDuration) / backoff.maxAttempts,\n                );\n              } else {\n                // Tried maxAttempts, now fail\n                throw response;\n              }\n            });\n        })\n        .catch((errResponse, caught) => {\n          if (!errResponse.text) {\n            throw errResponse;\n          }\n          return Observable.of(actions.requestFailure(\n            url,\n            body,\n            errResponse.status,\n            errResponse.text(),\n            meta,\n            queryKey,\n          ));\n        });\n    });\n\n  @Effect() public mutateAsync: Observable<any> = this.actions$\n    .ofType(ngrxQueryActionTypes.MUTATE_ASYNC)\n    .mergeMap((action: any) => {\n      const {\n          url,\n        transform = identity,\n        update,\n        body,\n        optimisticUpdate,\n        options = <any>{},\n      } = action;\n      invariant(!!url, 'Missing required `url` field in action handler');\n\n      const state = getLatest(this.store);\n      const entities = this.config && this.config.entitiesSelector && this.config.entitiesSelector(state)\n        || defaultEntitiesSelector(state);\n      let optimisticEntities;\n      if (optimisticUpdate) {\n        optimisticEntities = optimisticUpdateEntities(optimisticUpdate, entities);\n      }\n\n      const queryKey = reconcileQueryKey(action);\n      // const start = new Date();\n      const { method = httpMethods.POST } = options;\n      const request = {\n        url,\n        method,\n        body,\n        headers: options.headers,\n        withCredentials: options.credentials === 'include',\n      };\n\n      // Note: only the entities that are included in `optimisticUpdate` will be passed along in the\n      // `mutateStart` action as `optimisticEntities`\n      this.store.dispatch(actions.mutateStart(url, body, request, optimisticEntities, queryKey));\n\n      return this.http.request(url, request)\n        .map(response => {\n          if (!response.ok) {\n            throw response;\n          }\n          const resStatus = (response && response.status) || 0;\n          const resBody = (response && response.json()) || undefined;\n          const resText = (response && response.text()) || undefined;\n\n          const transformed = transform(resBody, resText);\n          const newEntities = updateEntities(update, entities, transformed);\n          return actions.mutateSuccess(url, body, resStatus, newEntities, queryKey);\n        })\n        .catch(errResponse => Observable.of(actions.mutateFailure(url, body, errResponse.status, entities, queryKey)));\n    });\n  // @Effect() public cancelQuery: Observable<Action> = this.actions$;\n  // @Effect() public reset: Observable<Action> = this.actions$;\n\n  constructor(\n    private actions$: Actions,\n    private store: Store<any>,\n    private http: Http,\n    @Inject(NGRX_QUERY_CONFIG) private config: NgrxQueryConfig,\n  ) { }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/services/effects.service.ts"],"sourceRoot":""}